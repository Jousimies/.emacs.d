#+TITLE: Personal emacs configuration
#+DATE: [2023-02-27 Mon 14:14]
#+PROPERTY: header-args:emacs-lisp :results silent :tangle "~/.emacs.d/init.el"
#+AUTO_TANGLE: t
#+OPTIONS: author:nil
#+DESCRIPTION: Personal emacs configuration
#+HUGO_BASE_DIR: ~/Documents/hugo-source
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_TAGS: Emacs

* Early Init
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
  ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-

  ;; Profiling since here when in debug-mode
  (when init-file-debug
    (profiler-start 'cpu)
    (add-hook 'window-setup-hook #'profiler-stop 0))

  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 1.0)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars . 0) default-frame-alist)
  (push '(undecorated . t) default-frame-alist)
  (push '(fullscreen . maximized) initial-frame-alist)

  ;; (setq-default initial-major-mode 'fundamental-mode)
  ;; Disable mode-line when emacs startup.
  (setq-default mode-line-format nil)

  (setq initial-buffer-choice nil)

  (setq byte-compile-warnings nil)
  ;;; early-init.el ends here
#+end_src

* Start, Lexical Binding
关于 lexical-binding 的作用见 [[https://nullprogram.com/blog/2016/12/22/][Make Emacs run (slightly) faster with lexical binding]] . 或者 [[http://www.yinwang.org/blog-cn/2013/03/26/lisp-dead-alive][Lisp 已死，Lisp 万岁！]]
#+begin_src emacs-lisp
  ;; init.el --- Personal Emacs Configuration -*- lexical-binding: t; no-byte-compile: t -*-

  ;;; Commentary:

  ;;; Code:
#+end_src

* Rudimentary Configuration
** Speedup
这部份的内容来源：[[https://github.com/seagle0128/.emacs.d/blob/master/init.el][.emacs.d/init.el at master · seagle0128/.emacs.d]]
可以加快 Emacs 的启动速度。
#+begin_src emacs-lisp
  (setq auto-mode-case-fold nil)

  (unless (or (daemonp) noninteractive init-file-debug)
    (let ((old-file-name-handler-alist file-name-handler-alist))
      (setq file-name-handler-alist nil)
      (add-hook 'emacs-startup-hook
                (lambda ()
                  "Recover file name handlers."
                  (setq file-name-handler-alist
                        (delete-dups (append file-name-handler-alist
                                             old-file-name-handler-alist)))))))
#+end_src
** Benchmark
可以使用的配置：[[https://github.com/purcell/emacs.d/blob/master/lisp/init-benchmarking.el][emacs.d/init-benchmarking.el at master · purcell/emacs.d]]

Emacs 进行性检检测还可以使用[[https://github.com/dholm/benchmark-init-el][dholm/benchmark-init-el: Benchmark your Emacs initialization]] 或者[[https://github.com/jschaf/esup][jschaf/esup: ESUP - Emacs Start Up Profiler]].

相比较与使用 Emacs 内置的 ~package.el~, 使用 borg 管理包，Emacs 的启动时间有一个明显的优化。

为了提高 Emacs 的启动速度，需要做的几个方面包括：[[Speedup]], [[PATH]], [[Early Init]], 以及使用 gcmh 管理使用时的 Garbage collection 行为。
#+begin_src emacs-lisp
  (add-hook 'window-setup-hook
            (lambda ()
              (garbage-collect)
              (let ((curtime (current-time)))
                (message "Times: init:%.06f total:%.06f gc-done:%d"
                         (float-time (time-subtract after-init-time before-init-time))
                         (float-time (time-subtract curtime before-init-time))
                         gcs-done)))
            90)
#+end_src
#+begin_src emacs-lisp
  (defun sanityinc/time-subtract-millis (b a)
    (* 1000.0 (float-time (time-subtract b a))))

  (defvar sanityinc/require-times nil
    "A list of (FEATURE LOAD-START-TIME LOAD-DURATION).
  LOAD-DURATION is the time taken in milliseconds to load FEATURE.")

  (defun sanityinc/require-times-wrapper (orig feature &rest args)
    "Note in `sanityinc/require-times' the time taken to require each feature."
    (let* ((already-loaded (memq feature features))
           (require-start-time (and (not already-loaded) (current-time))))
      (prog1
          (apply orig feature args)
        (when (and (not already-loaded) (memq feature features))
          (let ((time (sanityinc/time-subtract-millis (current-time) require-start-time)))
            (add-to-list 'sanityinc/require-times
                         (list feature require-start-time time)
                         t))))))

  (advice-add 'require :around 'sanityinc/require-times-wrapper)

  (define-derived-mode sanityinc/require-times-mode tabulated-list-mode "Require-Times"
    "Show times taken to `require' packages."
    (setq tabulated-list-format
          [("Start time (ms)" 20 sanityinc/require-times-sort-by-start-time-pred)
           ("Feature" 30 t)
           ("Time (ms)" 12 sanityinc/require-times-sort-by-load-time-pred)])
    (setq tabulated-list-sort-key (cons "Start time (ms)" nil))
    ;; (setq tabulated-list-padding 2)
    (setq tabulated-list-entries #'sanityinc/require-times-tabulated-list-entries)
    (tabulated-list-init-header)
    (when (fboundp 'tablist-minor-mode)
      (tablist-minor-mode)))

  (defun sanityinc/require-times-sort-by-start-time-pred (entry1 entry2)
    (< (string-to-number (elt (nth 1 entry1) 0))
       (string-to-number (elt (nth 1 entry2) 0))))

  (defun sanityinc/require-times-sort-by-load-time-pred (entry1 entry2)
    (> (string-to-number (elt (nth 1 entry1) 2))
       (string-to-number (elt (nth 1 entry2) 2))))

  (defun sanityinc/require-times-tabulated-list-entries ()
    (cl-loop for (feature start-time millis) in sanityinc/require-times
             with order = 0
             do (cl-incf order)
             collect (list order
                           (vector
                            (format "%.3f" (sanityinc/time-subtract-millis start-time before-init-time))
                            (symbol-name feature)
                            (format "%.3f" millis)))))

  (defun sanityinc/require-times ()
    "Show a tabular view of how long various libraries took to load."
    (interactive)
    (with-current-buffer (get-buffer-create "*Require Times*")
      (sanityinc/require-times-mode)
      (tabulated-list-revert)
      (display-buffer (current-buffer))))

  (defun sanityinc/show-init-time ()
    (message "init completed in %.2fms"
             (sanityinc/time-subtract-millis after-init-time before-init-time)))
#+end_src
** PATH
如果使用 emacs-plus, 会自动的添加到 path 当中，或者使用[[https://github.com/purcell/exec-path-from-shell][purcell/exec-path-from-shell: Make Emacs use the $PATH set up by the user's shell]]. 或者使用下面的配置.

这部份的配置来源：[[https://www.emacswiki.org/emacs/ExecPath][EmacsWiki: Exec Path]]

不设置 ~exec-path~, 在 MacOS 上有可能会提示找不到程序。
#+begin_src emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "This is particularly useful under Mac OS X and macOS."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))
  (set-exec-path-from-shell-PATH)
#+end_src
#+begin_src emacs-lisp
  (require 'cl-lib)
  (defun add-subdirs-to-load-path (search-dir)
    (interactive)
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
	       ;; 过滤出不必要的目录，提升Emacs启动速度
	       (cl-remove-if
		#'(lambda (subdir)
		    (or
		     ;; 不是目录的文件都移除
		     (not (file-directory-p (concat dir subdir)))
		     ;; 父目录、 语言相关和版本控制目录都移除
		     (member subdir '("." ".."
				      "dist" "node_modules" "__pycache__"
				      "RCS" "CVS" "rcs" "cvs" ".git" ".github"))))
		(directory-files dir)))
	(let ((subdir-path (concat dir (file-name-as-directory subdir))))
	  ;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升Emacs启动速度
	  (when (cl-some #'(lambda (subdir-file)
			     (and (file-regular-p (concat subdir-path subdir-file))
				  ;; .so .dll 文件指非Elisp语言编写的Emacs动态库
				  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
			 (directory-files subdir-path))

	    ;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾
	    ;; 这样Emacs会从父目录到子目录的顺序搜索Elisp插件，顺序反过来会导致Emacs无法正常启动
	    (add-to-list 'load-path subdir-path t))

	  ;; 继续递归搜索子目录
	  (add-subdirs-to-load-path subdir-path)))))
  (add-subdirs-to-load-path "~/.emacs.d/packages")
  ;; (add-to-list 'load-path "~/.emacs.d/packages")
#+end_src
** Utility Hooks and Functions
这个 [[https://github.com/ajgrf/on.el/tree/master/][ajgrf/on.el: Hooks for faster Emacs startup – GitHub mirror]] 增加了一些有用的 hook，可以控制包的启动时机。

更多参见：[[https://github.com/emacs-magus][emacs-magus]].
#+begin_src emacs-lisp
  (use-package on)
#+end_src

** Variables
定义一些变量，方便配置文件位置或针对特定系统进行相关设定。
#+begin_src emacs-lisp
  (defvar my-cloud "~/Nextcloud"
    "This folder is My cloud.")

  ;; L.Personal.Galaxy location may change, but folders in this directory never change.
  (defvar my-galaxy (expand-file-name "L.Personal.Galaxy" my-cloud)
    "This folder stores all the plain text files of my life.")

  (defvar website-directory "~/Nextcloud/L.Personal.Galaxy/website"
    "The source folder of my blog.")
#+end_src

[[https://github.com/emacscollective/no-littering][https://github.com/emacscollective/no-littering]], 会将一些包产生的文件集中放置到 etc 和 var 两个文件夹中，而不是散落在 user-emacs-directory 当中。

#+begin_src emacs-lisp
  (use-package no-littering)
#+end_src

** Evil modal edit

在经历了多种尝试之后，我最终选择了 Evil 模式编辑，其他的模式编辑有 [[https://github.com/meow-edit/meow][meow-edit/meow: Yet another modal editing on Emacs / 猫态编辑]].

我不使用 Meow 是因为它只能在 Emacs 中使用。

也曾经长时间使用过 Emacs 的原生按键方式，该体验在 Mac 系统上具有较好的一致性，但是原生按键方式有点费手。

*** evil
#+begin_src emacs-lisp
  (use-package evil
    :bind (:map evil-insert-state-map
                ("C-e" . move-end-of-line)
                ("C-k" . kill-line))
    :hook ((after-init . evil-mode)
           (after-change-major-mode . (lambda ()
                                        (setq-local evil-shift-width tab-width))))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-h-delete t)
    :config
    (setq evil-undo-system 'undo-fu)
    (setq evil-respect-visual-line-mode t)
    (setq evil-visual-state-cursor 'hollow)

    (setq evil-normal-state-tag " 𝐍 ")
    (setq evil-insert-state-tag " 𝐈 ")
    (setq evil-motion-state-tag " 𝐌 ")
    (setq evil-visual-state-tag " 𝐕 ")
    (setq evil-replace-state-tag " 𝐑 ")
    (setq evil-operator-state-tag " O ")
    (setq evil-emacs-state-tag " E "))

  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src
下面的配置来源：[[https://github.com/redguardtoo/emacs.d/blob/master/lisp/init-evil.el][emacs.d/init-evil.el at master · redguardtoo/emacs.d]]
*** evil-collection
[[https://github.com/emacs-evil/evil-collection][emacs-evil/evil-collection: A set of keybindings for evil-mode]] 设置 Major mode 下的按键绑定，比自己一一设置要方便。若没有你使用的，可以提 PR.

我使用 =SPC= 作为 =leader key=, 这个键在 evil-collection 的 major mode 中被配置成了其他的功能，可以通过设置 ~evil-collection-key-blacklist~ 禁用 =SPC= 键。

#+begin_src emacs-lisp
  ;; (with-eval-after-load 'evil
  ;;   (evil-collection-init))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-key-blacklist '("SPC" ","))
    (setq forge-add-default-bindings nil)
    (evil-collection-init))

#+end_src

*** evil-commentary
[[https://github.com/linktohack/evil-commentary][linktohack/evil-commentary: Comment stuff out. A port of vim-commentary]] 通过使用 ~gcc~ 添加注释，在 Mac 上可以通过使用 ~s-/~ 进行。

#+begin_src emacs-lisp
  (use-package evil-commentary
    :hook (on-first-file . evil-commentary-mode))
#+end_src

*** evil-surround
[[https://github.com/emacs-evil/evil-surround][emacs-evil/evil-surround: you will be surrounded (surround.vim for evil, the extensible vi layer)]] 可以在指定的区域添加成对的符号，具体使用参见以上页面。

具体的使用是对于 visual 状态，使用 ~S =~ 来插入成对的等于号，其他的符号同理。若要修改的话，使用 ~cs = *~ 来将等于号改为星号，其他的符号同理。

#+begin_src emacs-lisp
  (use-package evil-surround
    :hook (on-first-file . global-evil-surround-mode))
#+end_src

*** evil-embrace
[[https://github.com/cute-jumper/evil-embrace.el][cute-jumper/evil-embrace.el: Evil integration of embrace.el]] 具有和 evil-surround 相似的功能。

#+begin_src emacs-lisp
  (use-package evil-embrace
    :hook ((org-mode . embrace-org-mode-hook))
    :config
    (evil-embrace-enable-evil-surround-integration))
#+end_src

*** which-key-mode
[[https://github.com/justbur/emacs-which-key][justbur/emacs-which-key: Emacs package that displays available keybindings in popup]] 可以提示按键，对于不常使用的按键序列，有时想不起来，有提示还是很方便的。

#+begin_src emacs-lisp
  (use-package which-key
    :hook (on-first-input . which-key-mode)
    :config
    (setq which-key-show-early-on-C-h t)
    (setq which-key-idle-delay 10000)
    (setq which-key-idle-secondary-delay 0.05))
#+end_src

*** general
[[https://github.com/noctuid/general.el][noctuid/general.el: More convenient key definitions in emacs]] 结合 Evil 可以设置一系列的按键绑定，相对于 Emacs 原生的按键方式，序列化的按键比较友好。

具体的使用方式见 package 的 README 文件。
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer my/space-leader-def
                :prefix "SPC"
                :non-normal-prefix "M-SPC"
                :states '(normal visual insert emacs))
    (general-create-definer my/comma-leader-def
                :prefix ","
                :non-normal-prefix "M-,"
                :states '(normal visual insert emacs)))
#+end_src

#+begin_src emacs-lisp
  (defun my/emacs-config ()
    "My literate Emacs configuration."
    (interactive)
    (find-file (expand-file-name "emacs.org" user-emacs-directory)))

  (my/space-leader-def
    "f" '(:ignore t :wk "Files"))
#+end_src

** epkg
#+begin_src emacs-lisp
  (use-package epkg
    :commands (epkg-describe-package))

  (my/space-leader-def
    "p" '(:ignore t :wk "Package management")
    "pp" '(epkg-describe-package :wk "Epkg describe package"))

  (use-package epkg-marginalia
    :after (epkg marginalia)
    :config
    (cl-pushnew 'epkg-marginalia-annotate-package
                (alist-get 'package marginalia-annotator-registry)))
#+end_src

** auto-save
[[https://github.com/manateelazycat/auto-save][auto-save/auto-save.el at master · manateelazycat/auto-save]] 我使用这个包进行文件的自动保存，Emacs 自带 `auto-save-visited-mode', 但是没有 auto-save 这个包好用。

主要的问题是 auto-save-visited-mode 在 org-capture 当中不能关闭自动删除空格。

#+begin_src emacs-lisp
  (use-package auto-save
    :hook (on-first-file . auto-save-enable)
    :config
    (setq auto-save-silent t)
    (setq auto-save-delete-trailing-whitespace t))
#+end_src

** Auto tangle
使用 Literate programming 配置 Emacs 文件，使用它可以不用手动 tangle，文件保存后自动执行。

#+begin_src emacs-lisp
  (use-package org-auto-tangle
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Server
启用 Server 后可以使用 emacsclient 打开文件进行编辑，而不是新开一个 Emacs.

在 Mac 上使用 emacsclient 需要通过 automator 创建一个 application. 新建一个 run shell script 填入以下的内容。

#+begin_src shell
  /opt/homebrew/bin/emacsclient -n -a -c "$@"
#+end_src

#+begin_src emacs-lisp
  (use-package server
    :hook (on-first-input . server-start)
    :config
    (defun my/start-server ()
      (interactive)
      (if (not (server-running-p))
          (server-start))
      (message "Server has started")))
#+end_src

[[https://github.com/iqbalansari/restart-emacs][iqbalansari/restart-emacs: A simple emacs package to restart emacs from within emacs]]  Emacs 29 中 restart-emacs 己是 builtin function。
#+begin_src emacs-lisp
  (my/space-leader-def
    "q" '(:ignore t :wk "Quit/Restart")
    "qR" '(restart-emacs :wk "Restart emacs")
    "qq" '(server-force-delete :wk "Server Delete")
    "qs" '(my/start-server :wk "Server Delete"))
#+end_src

** Magit
[[https://github.com/magit/magit][magit/magit: It's Magit! A Git Porcelain inside Emacs.]] 是 Emacs 上的一大杀器应用，相对于命令行的方式使用 git 友好的很多。

通过 borg 安装 Magit 需要增加两行 load-path 的配置。使用时通过 ~C-x g~ 即可调用 Magit.
#+begin_src shell
  [submodule "magit"]
      path = lib/magit
      url = git@github.com:magit/magit.git
      load-path = .
      load-path = ./lisp
#+end_src
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit magit-status magit-submodule-add)
    :bind ("C-x g" . magit)
    :general (:keymaps 'with-editor-mode-map
                       "RET" "C-c C-c")
    :config
    (magit-add-section-hook 'magit-status-sections-hook
                            'magit-insert-modules
                            'magit-insert-unpulled-from-upstream)
    (remove-hook 'magit-module-sections-hook 'magit-insert-modules-overview)
    (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpulled-from-pushremote)
    (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-upstream)
    (remove-hook 'magit-module-sections-hook 'magit-insert-modules-unpushed-to-pushremote))

  (use-package forge
    :after magit)
#+end_src
*** browse-at-remote
#+begin_src emacs-lisp
  (use-package browse-at-remote
    :bind ("C-c f b" . browse-at-remote)
    :config
    (my/space-leader-def
      "fb" '(browse-at-remote :wk "Browse remote")))
#+end_src

** Custom
#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

* Emacs User Interface, Delicious
** Fonts
=Insevka Fixed= 和 =Source Han Serif SC= 这两个字体等宽，在 org-mode 中可以对齐表格。

尝试过 ~variable-pitch-mode~ 和 ~fixed-pitch-mode~, 不好用。

不设置 charset，在 MacOS 上默认使用 =PingFanc SC= 字体，看起来也可以。
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Fixed" :height 160)
  (if (display-graphic-p)
      (dolist (charset '(kana han cjk-misc bopomofo))
        (set-fontset-font (frame-parameter nil 'font)
                          charset (font-spec :family "Source Han Serif SC" :height 160)) t 'prepend))
#+end_src

** Themes
当前内置的 Modus-themes 主题看起来很好，I like it.
#+begin_src emacs-lisp
  (use-package modus-themes
    :config
    (setq modus-themes-bold-constructs t)
    (setq modus-themes-italic-constructs t)

    (setq modus-themes-common-palette-overrides
      '(;; mode-line
        (border-mode-line-active unspecified)
        (border-mode-line-inactive unspecified)
        (bg-mode-line-active bg-main)
        (fg-mode-line-active fg-main)

        ;; line-number
        (fg-line-number-inactive "gray50")
        (fg-line-number-active red-cooler)
        (bg-line-number-inactive unspecified)
        (bg-line-number-active unspecified)
        ;; link
        (underline-link border)
        (underline-link-visited border)
        (underline-link-symbolic border)

        ;; org agenda
        (date-common cyan)   ; default value (for timestamps and more)
        (date-deadline red-warmer)
        (date-event magenta-warmer)
        (date-holiday blue) ; for M-x calendar
        (date-now yellow-warmer)
        (date-scheduled magenta-cooler)
        (date-weekday cyan-cooler)
        (date-weekend blue-faint)

        ;; org heading
        (fg-heading-1 blue-warmer)
        (fg-heading-2 yellow-cooler)
        (fg-heading-3 cyan-cooler)))

    (setq modus-themes-prompts '(extrabold italic))

    (setq modus-themes-completions
      '((matches . (extrabold))
        (selection . (semibold italic text-also)))))
#+end_src

*** Theme switch

emacs-plus can switch themes by system. 通过增加的补定实现的此功能，若是不使用这种方法，还有 [[https://github.com/LionyxML/auto-dark-emacs][auto-dark-emacs]] 可以使用。

使用 [[https://github.com/mclear-tools/build-emacs-macos/tree/main/][mclear-tools/build-emacs-macos: Build script for emacs and macos]] 自编译 Emacs 也有改变主题的 patch.

#+begin_src emacs-lisp
  (defun my/apply-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (load-theme 'modus-operandi t))
      ('dark (load-theme 'modus-vivendi t))))
  (add-hook 'ns-system-appearance-change-functions #'my/apply-theme)
#+end_src

** all-the-icons
这里使用了[[https://github.com/domtronn/all-the-icons.el][domtronn/all-the-icons.el: A utility package to collect various Icon Fonts and propertize them within Emacs.]]

需要自己执行 all-the-icons-install-fonts 来安装对应的字体。

#+begin_src emacs-lisp
  (set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'prepend)
  (set-fontset-font t 'unicode (font-spec :family "file-icons") nil 'prepend)
#+end_src

这部份的配置来源：[[https://github.com/seagle0128/.emacs.d][seagle0128/.emacs.d: Centaur Emacs - A Fancy and Fast Emacs Configuration]]

#+begin_src emacs-lisp
  (use-package all-the-icons
    :config
    (let ((extension-icon-alist
           '(("bat"  all-the-icons-alltheicon "terminal" :face all-the-icons-lsilver)
             ("cmd"  all-the-icons-alltheicon "terminal" :face all-the-icons-lsilver)
             ("conf" all-the-icons-octicon "settings"    :v-adjust 0.0 :face all-the-icons-yellow)
             ("eln"  all-the-icons-octicon "file-binary" :v-adjust 0.0 :face all-the-icons-dsilver)
             ("epub" all-the-icons-faicon "book"         :height 1.0 :v-adjust -0.1 :face all-the-icons-green)
             ("exe"  all-the-icons-octicon "file-binary" :v-adjust 0.0 :face all-the-icons-dsilver)
             ("make" all-the-icons-fileicon "gnu"        :face all-the-icons-dorange)
             ("rss"  all-the-icons-octicon "rss"         :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange)
             ("toml" all-the-icons-octicon "settings"    :v-adjust 0.0 :face all-the-icons-yellow)
             ("tsx"  all-the-icons-fileicon "tsx"        :height 1.0 :v-adjust -0.1 :face all-the-icons-cyan-alt)
             ("xpm"  all-the-icons-octicon "file-media"  :v-adjust 0.0 :face all-the-icons-dgreen))))
      (dolist (icon extension-icon-alist)
        (add-to-list 'all-the-icons-extension-icon-alist icon)))

    (let ((regexp-icon-alist
           '(("\\.[bB][iI][nN]$"               all-the-icons-octicon "file-binary" :v-adjust 0.0 :face all-the-icons-yellow)
             ("^config$"                       all-the-icons-octicon "settings"    :v-adjust 0.0 :face all-the-icons-dorange)
             ("\\.\\(ba\\|z\\)shrc$"           all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dpink)
             ("\\.\\(bash\\|zsh\\)*_?profile$" all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dred)
             ("\\.\\(ba\\|z\\)sh_history$"     all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dsilver)
             ("\\.zshenv$"                     all-the-icons-alltheicon "script"   :height 0.9 :face all-the-icons-dred)
             ("Cask\\'"                        all-the-icons-fileicon "elisp"      :height 1.0 :v-adjust -0.2 :face all-the-icons-blue)
             ("NEWS$"                          all-the-icons-faicon "newspaper-o"  :height 0.9 :v-adjust -0.2)
             ("^Rakefile$"                     all-the-icons-alltheicon "ruby-alt" :face all-the-icons-red))))
      (dolist (icon regexp-icon-alist)
        (add-to-list 'all-the-icons-regexp-icon-alist icon)))

    (let ((mode-icon-alist
           '((xwidget-webkit-mode           all-the-icons-faicon "chrome"          :v-adjust -0.1 :face all-the-icons-blue)
             (bongo-playlist-mode           all-the-icons-material "queue_music"   :height 1.3 :face all-the-icons-green)
             (bongo-library-mode            all-the-icons-material "library_music" :height 1.1 :face all-the-icons-green)
             (simple-mpc-mode               all-the-icons-faicon "music"           :v-adjust -0.1 :face all-the-icons-green)
             (mingus-playlist-mode          all-the-icons-faicon "music"           :v-adjust -0.1 :face all-the-icons-green)
             (mingus-help-mode              all-the-icons-material "music_note"    :height 1.2 :face all-the-icons-green)
             (mingus-browse-mode            all-the-icons-material "library_music" :height 1.1 :face all-the-icons-green)
             (mingus-burn-mode              all-the-icons-material "queue_music"   :height 1.3 :face all-the-icons-green)
             (gnus-group-mode               all-the-icons-fileicon "gnu"           :face all-the-icons-silver)
             (gnus-summary-mode             all-the-icons-octicon "inbox"          :height 1.0 :v-adjust 0.0 :face all-the-icons-orange)
             (gnus-article-mode             all-the-icons-octicon "mail"           :height 1.1 :v-adjust 0.0 :face all-the-icons-lblue)
             (message-mode                  all-the-icons-octicon "mail"           :height 1.1 :v-adjust 0.0 :face all-the-icons-lblue)
             (diff-mode                     all-the-icons-octicon "git-compare"    :v-adjust 0.0 :face all-the-icons-lred)
             (flycheck-error-list-mode      all-the-icons-octicon "checklist"      :height 1.1 :v-adjust 0.0 :face all-the-icons-lred)
             (newsticker-mode               all-the-icons-faicon "rss-square"      :v-adjust -0.1 :face all-the-icons-orange)
             (newsticker-treeview-mode      all-the-icons-faicon "rss-square"      :v-adjust -0.1 :face all-the-icons-orange)
             (newsticker-treeview-list-mode all-the-icons-octicon "rss"            :height 1.1 :v-adjust 0.0 :face all-the-icons-orange)
             (newsticker-treeview-item-mode all-the-icons-octicon "rss"            :height 1.1 :v-adjust 0.0 :face all-the-icons-lorange)
             (conf-mode                     all-the-icons-octicon "settings"       :v-adjust 0.0 :face all-the-icons-yellow)
             (conf-space-mode               all-the-icons-octicon "settings"       :v-adjust 0.0 :face all-the-icons-yellow)
             (gitconfig-mode                all-the-icons-octicon "settings"       :v-adjust 0.0 :face all-the-icons-dorange)
             (forge-topic-mode              all-the-icons-alltheicon "git"         :face all-the-icons-blue)
             (help-mode                     all-the-icons-faicon "info-circle"     :height 1.1 :v-adjust -0.1 :face all-the-icons-purple)
             (helpful-mode                  all-the-icons-faicon "info-circle"     :height 1.1 :v-adjust -0.1 :face all-the-icons-purple)
             (Info-mode                     all-the-icons-faicon "info-circle"     :height 1.1 :v-adjust -0.1)
             (cask-mode                     all-the-icons-fileicon "elisp"         :height 1.0 :v-adjust -0.2 :face all-the-icons-blue)
             (ein:notebooklist-mode         all-the-icons-faicon "book"            :face all-the-icons-lorange)
             (ein:notebook-mode             all-the-icons-fileicon "jupyter"       :height 1.2 :face all-the-icons-orange)
             (ein:notebook-multilang-mode   all-the-icons-fileicon "jupyter"       :height 1.2 :face all-the-icons-dorange)
             (nov-mode                      all-the-icons-faicon "book"            :height 1.0 :v-adjust -0.1 :face all-the-icons-green)
             (gfm-mode                      all-the-icons-octicon "markdown"       :face all-the-icons-lblue)
             (osx-dictionary-mode           all-the-icons-material "library_books" :face all-the-icons-lblue)
             (youdao-dictionary-mode        all-the-icons-material "library_books" :face all-the-icons-lblue)
             (fanyi-mode                    all-the-icons-material "library_books" :face all-the-icons-lblue))))
      (dolist (icon mode-icon-alist)
        (add-to-list 'all-the-icons-mode-icon-alist icon))))
#+end_src

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :hook ((minibuffer-setup . all-the-icons-completion-mode)
           (marginalia-mode . all-the-icons-completion-marginalia-setup)))
#+end_src
** fringe-mode
因为我要使用 [[org-transclusion]], 所以不能默认不显示 fringe. 将其设置为最小模式。

fringe-mode 需要跟一个 cons cell, 直接使用 minimal 会报错。
#+begin_src emacs-lisp
  (define-fringe-bitmap 'right-curly-arrow  [])
  (define-fringe-bitmap 'left-curly-arrow  [])

  (fringe-mode '(1 . 1))
#+end_src

** hl-line-mode
高亮当前行，全局开启使用 ~global-hl-line-mode~.

不使用 ~global-hl-line-mode~ 因为不想在 dashboard 中开启行高亮。
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'hl-line-mode)
  (add-hook 'org-mode-hook 'hl-line-mode)
#+end_src

** line numbers
#+begin_src emacs-lisp
  (setq-default display-line-numbers-widen t)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'org-mode-hook 'display-line-numbers-mode)
  (add-hook 'LaTeX-mode-hook 'display-line-numbers-mode)
#+end_src

** scroll-bar-mode
#+begin_src emacs-lisp
  (scroll-bar-mode 0)
#+end_src

** fill column indicator
#+begin_src emacs-lisp
  (setq-default fill-column 90)

  (face-spec-set 'fill-column-indicator
                 '((default :height 0.1))
                 'face-override-spec)

  ;; only show fill indicator in prog mode.
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+end_src

** Paren
显示对应的括号，这个在 elisp 中挺友好。
#+begin_src emacs-lisp
  (setq show-paren-style 'parenthesis)
  (setq show-paren-context-when-offscreen 'overlay)

  (add-hook 'text-mode-hook 'show-paren-mode)
#+end_src

** Cursor and color
默认关闭光标闪烁。
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src

使用 Evil，通过光标的颜色来提示当前的输入法状态，结合使用[[http://zzzm.ysepan.com/][三码郑码 / 至至郑码 （至简·至爱）zhengma.plus]] 输入法，具有很好的使用体验，相当的明确感。

关于光标自动更换颜色，这里有个包可以使用：[[https://github.com/Eason0210/im-cursor-chg][Eason0210/im-cursor-chg]].
#+begin_src emacs-lisp :tangle no
  (defun im--chinese-p ()
    "Check if the current input state is Chinese."
    (if (featurep 'rime)
        (and (rime--should-enable-p)
             (not (rime--should-inline-ascii-p))
             current-input-method)
      current-input-method))

  (defun im-change-cursor-color ()
    "Set cursor color depending on input method."
    (interactive)
    (set-cursor-color (if (im--chinese-p)
                          "red"
                        (foreground-color-at-point))))

  (add-hook 'post-command-hook 'im-change-cursor-color)
#+end_src

[[https://emacs-china.org/t/topic/17717/42][切换输入法时自动更换光标颜色 - Emacs-general - Emacs China]] 提到了 ~post-command-hook~ 的开销比较大，调用频繁。

使用 evil 内置的 hook 也可以达到切换光标颜色的功能，同时避免 ~post-command-hook~ 的巨大开销。

#+begin_src emacs-lisp
  (defun im--chinese-p ()
    "Check if the current input state is Chinese."
    (if (featurep 'rime)
        (and (rime--should-enable-p)
             (not (rime--should-inline-ascii-p))
             current-input-method)
      current-input-method))

  (add-hook 'evil-insert-state-entry-hook
            (lambda ()
              (when (im--chinese-p)
                (set-cursor-color "red"))))

  (add-hook 'evil-insert-state-exit-hook
            (lambda ()
              (set-cursor-color (foreground-color-at-point))))
#+end_src

** Frame
窗口透明，更多见：[[https://emacs-china.org/t/emacs/2405/11][Emacs 透明窗口 - Emacs-general - Emacs China]]
#+begin_src emacs-lisp
  (set-frame-parameter nil 'alpha '(100 . 100))
#+end_src

在 MacOS 上新建的 frame 总是位于屏幕的左上角。解决方案：[[https://christiantietze.de/posts/2021/06/emacs-center-window/][Automatically Center New Emacs Windows (Aka Frames) on Screen • Christian Tietze]].
#+begin_src emacs-lisp
  (defun ct/frame-center (&optional frame)
    "Center a frame on the screen."
    (interactive)
    (let* ((frame (or (and (boundp 'frame) frame) (selected-frame)))
           (center (ct/frame-get-center frame)))
      (apply 'set-frame-position (flatten-list (list frame center)))))

  (defun ct/screen-usable-height (&optional display)
    "Return the usable height of the display.

  Some window-systems have portions of the screen which Emacs
  cannot address. This function should return the height of the
  screen, minus anything which is not usable."
    (- (display-pixel-height display)
       (cond ((eq window-system 'ns) 22) ;; macOS Menu Bar offset
             (t 0))))

  (defun ct/screen-usable-width (&optional display)
    "Return the usable width of the display."
    (display-pixel-width display))

  (defun ct/center-box (w h cw ch)
    "Center a box inside another box.

  Returns a list of `(TOP LEFT)' representing the centered position
  of the box `(w h)' inside the box `(cw ch)'."
    (list (/ (- cw w) 2) (/ (- ch h) 2)))

  (defun ct/frame-get-center (frame)
    "Return the center position of FRAME on it's display."
    (let ((disp (frame-parameter frame 'display)))
      (ct/center-box (frame-pixel-width frame) (frame-pixel-height frame)
                     (ct/screen-usable-width disp) (ct/screen-usable-height disp))))

  (defun ct/frame-center (&optional frame)
    "Center a frame on the screen."
    (interactive)
    (apply 'set-frame-position
           (let* ((frame (or (and (boundp 'frame) frame) (selected-frame)))
                  (center (ct/frame-get-center frame)))
             ;; Flatten the X/Y list in `center` into a single list with `frame`
             ;; so this list can be applied as parameters to `set-frame-position`:
             `(,frame ,@center))))

  (add-to-list 'after-make-frame-functions #'ct/frame-center 0)
#+end_src

默认的 make-frame 的按键是 ~s-n~, 使用修改的函数实现了同一个按键，两种形为。我默认的 frame 是全屏使用，只在少数时候使用 make-frame 的功能。
#+begin_src emacs-lisp
  (defun my/make-or-delete-frame ()
    (interactive)
    (if (= (frame-width) 80) ;; 80 is the default frame width.
        (delete-frame)
      (make-frame)))

  (global-set-key (kbd "s-n") 'my/make-or-delete-frame)
#+end_src

** modeline
*** mode-line-format
2023-01-30 发现 doom-modeline 总是在不停的 =redisplay_internal= ，需要消耗较多的资源。所以暂时禁用此包，通过自定义 mode-line-format 来配置 modeline。
#+begin_example
           210  56% + command-execute
            94  25% + ...
            62  16% - redisplay_internal (C function)
            61  16%  - eval
            51  13%   + doom-modeline-segment--buffer-info
             9   2%   + doom-modeline-format--main
             1   0%   + doom-modeline-segment--modals
#+end_example

[[https://emacs.stackexchange.com/questions/5529/how-to-right-align-some-items-in-the-modeline][mode line - How to right align some items in the modeline? - Emacs Stack Exchange]]
以下的函数来自上面的链接中的回答，使用 ~string-width~ 替代了 ~length~ ，否则在对含有中文的 heading 进行 org-clock 的时候，会导致超出 mode-line 只显示部份的 heading。

2023-02-01 Emacs 29 上使用 ~string-pixel-width~ 替代 ~string-width~ ，可以获得象素级对齐。
#+begin_src emacs-lisp
  (defun my/mode-line-padding ()
    (let* ((r-length (string-width (format-mode-line global-mode-string))))
      (propertize " "
                  'display `(space :align-to (- right ,(+ r-length 1))))))

  (add-to-list 'global-mode-string
               '(:eval (propertize
                        (concat
                         "𝚻𝚨𝚩 "
                         (number-to-string (tab-bar--current-tab-index))
                         ": "
                         (alist-get 'group (tab-bar--current-tab))) 'face 'font-lock-constant-face)))

  (setq mode-line-end-spaces
        '(""
          global-mode-string))

  (setq mode-line-position-column-line-format '(" %l,%c"))

  (setq mode-line-percent-position '(-4 "%p"))

  (setq-default mode-line-format
                `("%e"
                  mode-line-front-space
                  (:propertize ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote))
                  mode-line-frame-identification
                  mode-line-buffer-identification
                  mode-line-position
                  ;; (:eval (propertize " %I " 'face 'font-lock-constant-face))
                  "  "
                  (vc-mode vc-mode)
                  (:eval (when buffer-read-only
                           (concat "  "  (propertize "RO"
                                                     'face 'font-lock-type-face
                                                     'help-echo "Buffer is read-only"))))
                  (:eval (my/mode-line-padding))
                  mode-line-end-spaces))
#+end_src
上式中的 ~%e~ 等说明如下：[[http://emacs-fu.blogspot.com/2011/08/customizing-mode-line.html][emacs-fu: customizing the mode-line]].
#+begin_quote
  %b -- print buffer name.      %f -- print visited file name.
  %F -- print frame name.
  %* -- print %, * or hyphen.   %+ -- print *, % or hyphen.
        %& is like %*, but ignore read-only-ness.
        % means buffer is read-only and * means it is modified.
        For a modified read-only buffer, %* gives % and %+ gives *.
  %s -- print process status.   %l -- print the current line number.
  %c -- print the current column number (this makes editing slower).
        To make the column number update correctly in all cases,
        `column-number-mode' must be non-nil.
  %i -- print the size of the buffer.
  %I -- like %i, but use k, M, G, etc., to abbreviate.
  %p -- print percent of buffer above top of window, or Top, Bot or All.
  %P -- print percent of buffer above bottom of window, perhaps plus Top,
        or print Bottom or All.
  %n -- print Narrow if appropriate.
  %t -- visited file is text or binary (if OS supports this distinction).
  %z -- print mnemonics of keyboard, terminal, and buffer coding systems.
  %Z -- like %z, but including the end-of-line format.
  %e -- print error message about full memory.
  %@ -- print @ or hyphen.  @ means that default-directory is on a
        remote machine.
  %[ -- print one [ for each recursive editing level.  %] similar.
  %% -- print %.   %- -- print infinitely many dashes.
Decimal digits after the % specify field width to which to pad.
#+end_quote

*** mode-line-bell
[[https://github.com/purcell/mode-line-bell][purcell/mode-line-bell: Flash the Emacs mode line instead of ringing the bell]] 如题。
#+begin_src emacs-lisp
  (use-package mode-line-bell
    :hook (on-first-buffer . mode-line-bell-mode))
#+end_src

** rainbow-mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** pulse

#+begin_src emacs-lisp
  (defun pulse-line (&rest _)
    "Pulse the current line."
    (pulse-momentary-highlight-one-line (point)))

  (dolist (command '(evil-paste-after
                     evil-paste-pop
                     evil-paste-before
                     evil-delete
                     evil-delete-line))
    (advice-add command :after #'pulse-line))
#+end_src
** dashboard
Dashboard 可以让启动界面看起来比 scratch 界面更 fancy, 但是会比较明显的增加启动时间，有明显的迟顿感。

Dashboard 界面的 banner 使用的是 ~ascii art~, 可以通过 [[https://ascii.co.uk/][ASCII.co.uk - The home of all things ASCII]] 生成。

或者不使用 dashboard, 将启动界面设置成图片等，参见 [[https://emacs-china.org/t/topic/264/33][如何自定义 Banner 的图案？ - Spacemacs - Emacs China]].

也可以结合 [[https://www.emacswiki.org/emacs/TipOfTheDay][EmacsWiki: Tip Of The Day]].

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq dashboard-center-content t)
    (setq dashboard-set-init-info t)
    (setq dashboard-set-footer nil)
    (setq dashboard-banner-logo-title nil)
    (setq dashboard-heading-icons t)
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (agenda . 5)))
    (require 'cal-china)
    (let* ((ny (calendar-gregorian-from-absolute
                (cadr (assoc 1 (calendar-chinese-year
                                (string-to-number
                                 (format-time-string "%Y" (current-time))))))))
           (m (string-to-number (format-time-string "%m" (current-time))))
           (d (string-to-number (format-time-string "%d" (current-time)))))
      (if (and (= d (cadr ny))
               (= m (car ny)))
          (setq dashboard-startup-banner (expand-file-name "src/banner2.txt" user-emacs-directory))
        (setq dashboard-startup-banner (expand-file-name "src/banner.txt" user-emacs-directory))))
    (setq dashboard-set-navigator t)
    (with-eval-after-load 'all-the-icons
      (setq dashboard-navigator-buttons
            `(((,(all-the-icons-octicon "mark-github" :height 1 :v-adjust 0.0)
                "Emacs Configuration" "Browse homepage"
                (lambda (&rest _) (browse-url "https://github.com/Jousimies/.emacs.d")))
               (,(all-the-icons-octicon "law" :height 1 :v-adjust 0.0)
                "Blog" "Browse blog"
                (lambda (&rest _) (browse-url "https://jousimies.github.io"))))))))

  (my/space-leader-def
    "bo" '(dashboard-open :wk "*Dashboard*"))

  (with-eval-after-load 'evil
    (evil-define-key 'motion 'dashboard-mode-map
      "gf" 'find-file
      "gb" 'consult-buffer))

  (run-with-idle-timer 300 t #'dashboard-open)
#+end_src
** color-identifiers-mode
#+begin_src emacs-lisp
  (use-package color-identifiers-mode
    :hook (on-first-file . global-color-identifiers-mode))
#+end_src

* Powerful Emacs Equipped with Builtin Packages
Emacs 内置了很多有用的 mode, 详细内容请参考仓库：[[https://github.com/condy0919/emacs-newbie][condy0919/emacs-newbie: Introduction to Emacs]]. 初学者可以看看。
** Better default
#+begin_src emacs-lisp
  (setq frame-inhibit-implied-resize t)
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
#+end_src

#+begin_src emacs-lisp
  (setq-default ring-bell-function 'ignore
                use-short-answers t
                read-process-output-max #x10000
                message-kill-buffer-on-exit t
                message-kill-buffer-query nil
                indent-tabs-mode nil
                tab-width 4
                make-backup-files nil
                create-lockfiles nil
                confirm-kill-processes nil
                confirm-kill-emacs nil
                recenter-redisplay nil
                load-prefer-newer t
                mark-ring-max 128
                next-screen-context-lines 5
                inhibit-default-init t
                inhibit-startup-message t
                inhibit-splash-screen t
                inhibit-compacting-font-caches t
                ;; inhibit-quit nil
                fast-but-imprecise-scrolling t
                scroll-preserve-screen-position t
                auto-save-default nil
                auto-save-list-file-name nil
                kill-do-not-save-duplicates t
                kill-ring-max (* kill-ring-max 2)
                history-delete-duplicates t
                view-read-only t
                kill-read-only-ok t
                async-shell-command-display-buffer nil
                ;; Improve the performance of rendering long lines.
                bidi-display-reordering nil)

  (setq ffap-machine-p-known 'reject)
#+end_src

** system coding
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src

** profiler
#+begin_src emacs-lisp
  (add-hook 'profiler-report-mode-hook #'hl-line-mode)
#+end_src

** buffer
#+begin_src emacs-lisp
  (setq switch-to-buffer-in-dedicated-window 'pop)
  (setq switch-to-buffer-obey-display-actions t)
#+end_src
#+begin_src emacs-lisp
  (my/space-leader-def
    "b" '(:ignore t :wk "Buffer/Bookmark")
    "be" '(eval-buffer :wk "Eval buffer")
    "bk" '(kill-this-buffer :wk "Kill This Buffer"))

  (with-eval-after-load 'evil
    (evil-define-key 'normal 'global
      "gB" 'switch-to-prev-buffer
      "gb" 'switch-to-buffer
      "zx" 'kill-current-buffer))
#+end_src

** calculator
#+begin_src emacs-lisp
  (use-package calc
    :hook ((calc-trail-mode . (lambda ()
                                (setq-local mode-line-format nil)))
           (calc-mode . (lambda ()
                          (setq-local mode-line-format nil))))
    :config
    (setq calc-window-height 15))

  (my/comma-leader-def
    "C" '(calc :wk "calc"))
#+end_src

** column-number-mode
作用是在 modeline 中显示当前光标竖向处的位置。

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'column-number-mode)
#+end_src

** size-indication-mode
作用是在 modeline 中显示文件的大小。

#+begin_src emacs-lisp
  (add-hook 'find-file-hook 'size-indication-mode)
#+end_src

** delete-selection-mode
作用是当选中区域后输入字符会删除选中的区域，大部份软件都是这种行为。

#+begin_src emacs-lisp
  (add-hook 'on-first-input-hook 'delete-selection-mode)
#+end_src

** winner-mode
进行窗口管理。
#+begin_src emacs-lisp
  (setq-default winner-dont-bind-my-keys t)
  (add-hook 'on-first-buffer-hook 'winner-mode)
  (setq winner-boring-buffers '("*Completions*"
                                "*Compile-Log*"
                                "*inferior-lisp*"
                                "*Fuzzy Completions*"
                                "*Apropos*"
                                "*Help*"
                                "*cvs*"
                                "*Buffer List*"
                                "*Ibuffer*"
                                "*esh command on file*"))
#+end_src
#+begin_src emacs-lisp
  (my/space-leader-def
    "w" '(:ignore t :wk "Window")
    "wu" '(winner-undo :wk "Undo winner")
    "wr" '(winner-redo :wk "Redo winner"))
#+end_src

** auto-revert-mode
#+begin_src emacs-lisp
  (add-hook 'on-first-file-hook 'global-auto-revert-mode)
#+end_src

** tab-bar-mode
可以将 mode-line 上的一些信息显示在 tab-bar 之上。
#+begin_example
(setq tab-bar-format '(tab-bar-format-history
                       tab-bar-format-tabs
                       tab-bar-format-align-right
                       tab-bar-format-global))
#+end_example
#+begin_src emacs-lisp
  (use-package tab-bar
    :hook (on-first-file . tab-bar-mode)
    :config
    (setq tab-bar-new-tab-choice "*dashboard*")
    (setq tab-bar-close-button-show nil)
    (setq tab-bar-tab-hints nil)
    (setq tab-bar-show nil))

  (use-package tabspaces
    :after tab-bar
    :hook (tab-bar-mode . tabspaces-mode)
    :config
    (setq tabspaces-session-file
          (expand-file-name "tabsession.el" no-littering-var-directory))
    (setq tabspaces-use-filtered-buffers-as-default t))
#+end_src
#+begin_src emacs-lisp
  (my/space-leader-def
    "t" '(:ignore t :wk "Tabs")
    "tn" '(tab-new :wk "New")
    "tg" '(tab-group :wk "Group")
    "tr" '(tab-bar-switch-to-recent-tab :wk "Recent")
    "tc" '(tab-close :wk "Close")
    "tC" '(tab-close-group :wk "Close group")
    "tO" '(tab-close-other :wk "Close other"))

  (with-eval-after-load 'evil
    (evil-define-key 'normal 'global
      "gs" 'tab-switch))
#+end_src
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("^.*\\.\\(org\\|md\\|tex\\|log\\)$"
                 (display-buffer-in-tab)
                 (tab-name . "Edit")
                 (tab-group . "Edit")))

  (add-to-list 'display-buffer-alist
               '((or (derived-mode . dired-mode)
                     (derived-mode . dirvish-mode))
                 (display-buffer-in-tab)
                 (tab-name . "Dired")
                 (tab-group . "Dired")))

  (add-to-list 'display-buffer-alist
               '((derived-mode . image-mode)
                 (display-buffer-in-tab)
                 (tab-name . "Pic")
                 (tab-group . "Pic")))

  (add-to-list 'display-buffer-alist
               '((derived-mode . emacs-lisp-mode)
                 (display-buffer-in-tab)
                 (tab-name . "Prog")
                 (tab-group . "Prog")))

  (add-to-list 'display-buffer-alist
               `(,(rx (| "*scratch*"
                         "*dashboard*"
                         "*Messages*"))
                 (display-buffer-in-tab)
                 (tab-name . "Home")
                 (tab-group . "Home")
                 (window-parameters . ((mode-line-format . none)))))
#+end_src
** savehist-mode
#+begin_src emacs-lisp
  (setq history-length 1000
        savehist-save-minibuffer-history 1
        savehist-additional-variables '(kill-ring
                                        search-ring
                                        regexp-search-ring)
        history-delete-duplicates t)
  (add-hook 'on-first-file-hook 'savehist-mode)
#+end_src

** save-place-mode
#+begin_src emacs-lisp
  (add-hook 'on-first-buffer-hook 'save-place-mode)
#+end_src

** midnight-mode
作用是半夜的时候自动清理 buffer。怀疑这个导致 mu4e 出现 error code 1 的错误，先关闭试试。
#+begin_src emacs-lisp
  (add-hook 'on-first-buffer-hook 'midnight-mode)
#+end_src

** so-long-mode
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'global-so-long-mode)
  (setq-default large-file-warning-threshold nil)
  (when (fboundp 'so-long-enable)
    (add-hook 'on-first-file-hook 'so-long-enable))
#+end_src

** electric-pair-mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (add-hook 'org-mode-hook 'electric-pair-mode)
#+end_src

** prettify-symbols-mode
#+begin_src emacs-lisp
  (setq prettify-symbols-alist '(("lambda" . ?λ)
                                 ("function" . ?𝑓)))
  (add-hook 'prog-mode-hook 'prettify-symbols-mode)
  (add-hook 'LaTeX-mode-hook 'prettify-symbols-mode)
#+end_src

** hippie-expand
#+begin_src emacs-lisp
  (setq hippie-expand-try-functions-list '(try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

** outline-minor-mode
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'outline-minor-mode)
#+end_src

** pixel-scroll-precision-mode
这个 mode 不好用，使用触摸板大幅度滚动屏幕后，会自动回到原先的位置。
#+begin_src emacs-lisp
  (use-package loaddefs
    :hook (on-first-file . pixel-scroll-precision-mode))
#+end_src

** recentf-mode
#+begin_src emacs-lisp
  (use-package recentf
    :hook (on-first-buffer . recentf-mode)
    :config
    (setq recentf-auto-cleanup 300)
    (setq recentf-max-saved-items 1000))

  (with-eval-after-load 'evil
    (evil-define-key 'normal 'global
      "gr" 'recentf-open-files))
#+end_src

** visual-line-mode
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'org-roam-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'LaTeX-mode-hook #'turn-on-visual-line-mode)
#+end_src

** word-wrap-whitespace-mode
这个是 Emacs 29 中的功能，具体见：[[https://github.com/emacs-mirror/emacs/commit/c789430331948e76b38091aa95bb9a9602a08289][Add new minor mode word-wrap-whitespace-mode · emacs-mirror/emacs@c789430]]

如果你使用 emacs 29 以下的版本，将这个文件保存到本地可以使用。
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'word-wrap-whitespace-mode)
  (add-hook 'org-roam-mode-hook 'word-wrap-whitespace-mode)
#+end_src

** dired
#+begin_src emacs-lisp
  (use-package dired
    :bind ("C-x d" . dired)
    :config
    (setq insert-directory-program "/opt/homebrew/bin/gls")
    (setq dired-use-ls-dired t)
    (setq dired-dwim-target t)
    (setq dired-auto-revert-buffer #'dired-buffer-stale-p)
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'top)
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group")
    (setq dired-auto-revert-buffer t))
#+end_src

*** dired-hide-dotfiles
#+begin_src emacs-lisp
  (use-package dired-hide-dotfiles
    :bind (:map dired-mode-map
                ("s-." . dired-hide-dotfiles-mode)))
#+end_src

*** dirvish
#+begin_src emacs-lisp
  (use-package dirvish
    :bind ([remap dired] . dirvish)
    :config
    (setq dirvish-use-header-line nil)
    (setq dirvish-use-mode-line nil)
    (setq dirvish-hide-cursor nil)
    (with-eval-after-load 'doom-modeline
      (setq dirvish-mode-line-height doom-modeline-height))

    (setq dirvish-default-layout '(0 0.4 0.6))
    (setq dirvish-header-line-format
          '(:left (path) :right (free-space)))
    (setq dirvish-mode-line-format
          '(:left (sort file-time " " file-size symlink) :right (omit yank index)))
    :hook ((dirvish-find-entry . (lambda (&rest _) (setq-local truncate-lines t)))
           (on-switch-buffer . dirvish-override-dired-mode)))
#+end_src

~e~ 绑定的函数见：[[Open file with system file manager]]
#+begin_src emacs-lisp
  (with-eval-after-load 'evil-collection
    (evil-collection-define-key 'normal 'dirvish-mode-map
      "q" 'dirvish-quit
      "e" 'xah-show-in-desktop))

  ;; dired has default keybinding, C-x d, remap it to dirvish.

  (with-eval-after-load 'evil
    (evil-define-key 'normal 'global
      "zd" 'dirvish-quick-access))
#+end_src

*** consult-dir
#+begin_src emacs-lisp
  (use-package consult-dir
    :bind (("C-x C-d" . consult-dir)
           (:map minibuffer-mode-map
                 ("C-x C-d" . consult-dir)
                 ("C-x C-j" . consult-dir-jump-file))))
#+end_src
** window-divider-mode
#+begin_src emacs-lisp
  (use-package frame
    :config
    (face-spec-set 'window-divider
                   '((((background light))
                      :foreground "#000000")
                     (t
                      :foreground "#FFFFFF"))
                   'face-override-spec)
    (setq window-divider-default-bottom-width 1)
    (setq window-divider-default-places 'bottom-only)
    :hook (after-init . window-divider-mode))
#+end_src

** doc-view
#+begin_src emacs-lisp
  (setq doc-view-mupdf-use-svg t)
  (setq doc-view-imenu-flatten t)
  (setq doc-view-continuous t)
#+end_src

** abbrev-mode
#+begin_src emacs-lisp
  (setq-default abbrev-mode t)
#+end_src

** bookmark
#+begin_src emacs-lisp
  (my/space-leader-def
    "ba" 'bookmark-set
    "br" 'bookmark-rename
    "bd" 'bookmark-delete
    "bj" 'bookmark-jump)
#+end_src

** clipboard
#+begin_src emacs-lisp
  (setq select-enable-primary t)
#+end_src

** files
[[https://emacsredux.com/blog/2022/06/12/auto-create-missing-directories/][Auto-create Missing Directories | Emacs Redux]].
#+begin_src emacs-lisp
  (defun my/auto-create-missing-dirs ()
    (let ((target-dir (file-name-directory buffer-file-name)))
      (unless (file-exists-p target-dir)
        (make-directory target-dir t))))

  (add-to-list 'find-file-not-found-functions #'my/auto-create-missing-dirs)
#+end_src
* Awesome Emacs Equipped with Third-Party Packages
** undo
Emacs 自带 undo 和 undo-redo 功能。这里使用了 ~undo-fu~ 和 ~undo-fu-session~ 以及 ~vundo~ 这三个包。

Evil 模式编辑需要设置 undo system.
#+begin_src emacs-lisp
  (use-package undo-fu)

  (use-package undo-fu-session
    :after undo-fu
    :hook (on-first-file . undo-fu-session-global-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package vundo
    :config
    (setq vundo-glyph-alist vundo-unicode-symbols)
    :bind ("C-x u" . vundo))
#+end_src

** delete
关于 Emacs 中的删除，一个是 ~delete-selection-mode~, ~hungry-delelte~ 以及是否使用系统垃圾桶。
#+begin_src emacs-lisp
  (setq delete-by-moving-to-trash t)
  (setq trash-directory "~/.Trash")
#+end_src

[[https://github.com/nflath/hungry-delete][nflath/hungry-delete: Enables hungry deletion in all modes.]]
#+begin_src emacs-lisp
  (use-package hungry-delete
    :custom
    (hungry-delete-chars-to-skip " \t\n\r\f\v")
    :hook ((text-mode . hungry-delete-mode)
           (prog-mode . hungry-delete-mode)
           (org-mode . hungry-delete-mode)))
#+end_src

** gc-buffers
作用是自动删除 buffers.
#+begin_src emacs-lisp
  (use-package gc-buffers
    :hook (on-first-buffer . gc-buffers-mode))
#+end_src

** COMMENT ace-window
作用是方便进行窗口的跳转，对于笔记本这种不大的屏幕不怎么需要，如果是较大的屏幕很有用。可以结合 winner 进行使用。

对于同一 buffer 中位置的跳转，想要回到之前的位置可以使用 ~evil-jump-backward~.
#+begin_src emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window))
#+end_src

** COMMENT sis
[[https://www.sheerwill.live/posts/main/20220723211325-vanilla_emacs_with_purcell/#init-sis-dot-el][Vanilla Emacs with Purcell | Lucius | Braindump]]
#+begin_src emacs-lisp
  (use-package sis
    :config
    (setq sis-other-cursor-color "red")
    (setq sis-english-source "com.apple.keylayout.ABC")
    (setq sis-other-source "im.rime.inputmethod.Squirrel.Hans")
    (add-hook 'evil-insert-state-exit-hook #'sis-set-english)
    (sis-global-cursor-color-mode t)
    (sis-global-context-mode t)
    (sis-global-respect-mode t)
    (sis-global-inline-mode t))
#+end_src
** rime
#+begin_src emacs-lisp
  (use-package rime
    :init
    (setq rime-title "𝐑 ")
    :config
    (setq default-input-method "rime")
    (setq rime-user-data-dir "~/Library/Rime/")
    (setq rime-emacs-module-header-root "/Applications/Emacs.app/Contents/Resources/include/")
    (setq rime-librime-root (expand-file-name "librime/dist" user-emacs-directory))
    (setq rime-show-candidate 'minibuffer)
    ;; (setq rime-posframe-properties '(:internal-border-width 0))
    (setq rime-disable-predicates '(rime-predicate-prog-in-code-p
                                    rime-predicate-org-in-src-block-p
                                    rime-predicate-org-latex-mode-p
                                    rime-predicate-tex-math-or-command-p))

    (setq rime-inline-predicates '(rime-predicate-space-after-cc-p
                                   rime-predicate-after-alphabet-char-p))
    :bind (:map rime-mode-map
                ("M-j" . rime-force-enable))
    :hook ((evil-insert-state-entry . (lambda ()
                                        (if (and (not (rime--should-inline-ascii-p))
                                                 (eq major-mode 'org-mode)
                                                 (not (org-at-clock-log-p))
                                                 (not (org-at-table-p))
                                                 (not (org-at-timestamp-p))
                                                 (not (and (bolp) (org-on-heading-p))))
                                            (activate-input-method "rime"))))
           (evil-insert-state-exit .  #'evil-deactivate-input-method)))
#+end_src

进行 Evil 的 insert 状态时自动的切换中英文输入法的状态，结合 rime 的 predicates 使用。

[[https://github.com/colawithsauce/rime-regexp.el/tree/main/][rime-regexp-mode]], 通过此包可以使用输入法进行文件的检索，若使用拼音输入法则可以通过拼音进行文件名的检索。我使用三郑输入法，则可以使用形码进行检索。
#+begin_src emacs-lisp
  (use-package rime-regexp
    :hook (on-first-input . rime-regexp-mode))
#+end_src

** helpful
#+begin_src emacs-lisp
  (use-package helpful
    :commands helpful-update
    :bind (([remap describe-function] . helpful-callable)
           ([remap describe-variable] . helpful-variable)
           ([remap describe-key] . helpful-key))
    :init
    (setq help-window-select 'always)
    (setq help-window-keep-selected t)
    :config
    (add-to-list 'display-buffer-alist
                 '((or (derived-mode . help-mode)
                       (derived-mode . helpful-mode))
                   (display-buffer-reuse-mode-window display-buffer-in-side-window)
                   (window-width . 0.5)
                   (side . right)
                   (slot . 0))))
#+end_src
#+begin_src emacs-lisp
  (autoload #'elisp-demos-advice-helpful-update "elisp-demos" nil t)
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
#+end_src
** expand-region
这个用于扩展选区，有时候比 Evil 的 Visual 好用。最新的配置中己经使用 =v= 替代了 =C-== 这个快捷键。
#+begin_src emacs-lisp
  (use-package expand-region
    :after evil
    :bind (("C-=" . er/expand-region)
           (:map evil-visual-state-map
                 ("v" . er/expand-region))))
#+end_src

** COMMENT symbol-overlay
#+begin_src emacs-lisp
  (dolist (hook '(prog-mode-hook html-mode-hook yaml-mode-hook conf-mode-hook))
    (add-hook hook 'symbol-overlay-mode))

  (with-eval-after-load 'symbol-overlay
    (define-key symbol-overlay-mode-map (kbd "M-i") 'symbol-overlay-put)
    (define-key symbol-overlay-mode-map (kbd "M-I") 'symbol-overlay-remove-all)
    (define-key symbol-overlay-mode-map (kbd "M-n") 'symbol-overlay-jump-next)
    (define-key symbol-overlay-mode-map (kbd "M-p") 'symbol-overlay-jump-prev)
    (define-key symbol-overlay-mode-map (kbd "s-r") 'symbol-overlay-rename))
#+end_src

** COMMENT bicycle
#+begin_src emacs-lisp
  (with-eval-after-load 'outline
    (define-key outline-minor-mode-map (kbd "C-<tab>") 'bicycle-cycle)
    (define-key outline-minor-mode-map (kbd "S-<tab>") 'bicycle-cycle-global))
#+end_src

** ctrlf
#+begin_src emacs-lisp
  (use-package ctrlf
    :after evil
    :hook (on-first-buffer . ctrlf-mode)
    :config
    (evil-global-set-key 'normal (kbd "/") 'ctrlf-forward-default))
#+end_src
** avy
#+begin_src emacs-lisp
  (my/comma-leader-def
    "g" '(:ignore t :wk "Goto")
    "gc" '(avy-goto-char :wk "Goto Char")
    "gC" '(avy-goto-char-2 :wk "Goto Char 2")
    "gl" '(avy-goto-line :wk "Goto Line")
    "gw" '(avy-goto-word-0 :wk "Goto Line"))
#+end_src
** whitespace-cleanup-mode
#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :hook (on-first-file . whitespace-cleanup-mode))
#+end_src

** elisp-demos
[[https://github.com/xuchunyang/elisp-demos][xuchunyang/elisp-demos: Demonstrate Emacs Lisp APIs]] 用于查查函数的用法很方便。

** tempel
#+begin_src emacs-lisp
  (use-package tempel
    :bind (("M-+" . tempel-complete)
           ("M-*" . tempel-insert))
    :config
    (setq tempel-path `("~/.emacs.d/template/tempel"
                        ,(expand-file-name "template/tempel" my-galaxy))))
#+end_src

** yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :hook (on-first-file . yas-global-mode))
  (use-package yasnippet-snippets
    :after yasnippet)
#+end_src

** rg
#+begin_src emacs-lisp
  (use-package rg
    :hook (on-first-input . rg-enable-default-bindings)
    :config
    (setq rg-group-result t)
    (setq rg-show-columns t))
#+end_src

** Minibuffer and completion
*** minibuffer
#+begin_src emacs-lisp
  (setq read-buffer-completion-ignore-case t)
  (setq completion-ignore-case t)
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

  (use-package simple
    :config
    (setq-default read-extended-command-predicate #'command-completion-default-include-p))

  (use-package minibuffer
    :config
    (setq completion-category-overrides '((file (styles basic partial-completion))))
    (setq read-file-name-completion-ignore-case t)

    (setq-local completion-in-region-function
                (lambda (&rest args)
                  (apply (if vertico-mode
                             #'consult-completion-in-region
                           #'completion--in-region)
                         args))))
#+end_src
*** orderless
#+begin_src emacs-lisp
  (setq tab-always-indent 'complete)

  (use-package orderless
    :config
    (setq completion-styles '(orderless partial-completion)))
#+end_src

*** vertico
#+begin_src emacs-lisp
  (use-package vertico
    :load-path "~/.emacs.d/packages/vertico"
    :hook (after-init . vertico-mode)
    :config
    (setq vertico-cycle t)
    :bind (:map vertico-map
        ("C-j" . vertico-next)
        ("C-k" . vertico-previous)))

  (use-package vertico-directory
    :after vertico
    :bind (:map vertico-map
          ("C-u" . vertico-directory-up)))
#+end_src
*** marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :hook ((minibuffer-setup . marginalia-mode)))
#+end_src

*** embark
#+begin_src emacs-lisp
  (use-package embark
    :bind (("C-." . embark-act)
           ("M-." . embark-dwim)
           (:map vertico-map
                 ("C-c C-o" . embark-export)
                 ("C-c C-c" . embark-act)))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  (my/space-leader-def
    "fe" '(embark-open-externally :wk "Open externally"))
#+end_src
*** consult
#+begin_src emacs-lisp
  (use-package consult
    :commands consult-outline
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :bind (([remap apropos] . consult-apropos)
           ([remap bookmark-jump] . consult-bookmark)
           ([remap goto-line] . consult-goto-line)
           ([remap imenu] . consult-imenu)
           ([remap locate] . consult-locate)
           ([remap load-theme] . consult-theme)
           ([remap man] . consult-man)
           ([remap recentf-open-files] . consult-recent-file)
           ([remap switch-to-buffer] . consult-buffer)
           ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
           ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
           ([remap yank-pop] . consult-yank-pop)
           :map minibuffer-mode-map
           ("C-r" . consult-history)))

  (with-eval-after-load 'evil
    (evil-declare-key 'normal org-mode-map
      "gh" 'consult-outline)
    (evil-declare-key 'normal LaTeX-mode-map
      "gh" 'consult-outline))
#+end_src

*** corfu
#+begin_src emacs-lisp
  (use-package corfu
    :config
    (setq corfu-cycle t)
    (setq corfu-auto t)
    (setq corfu-auto-prefix 2)
    (setq corfu-auto-delay 0.0)
    (setq corfu-preselect 'valid)

    (setq-default corfu-quit-no-match 'separator)
    :init
    (defun corfu-enable-always-in-minibuffer ()
    "Enable Corfu in the minibuffer if Vertico/Mct are not active."
    (unless (or (bound-and-true-p mct--active)
                (bound-and-true-p vertico--input)
                (eq (current-local-map) read-passwd-map))
      (setq-local corfu-auto nil) ;; Enable/disable auto completion
      (setq-local corfu-echo-delay nil ;; Disable automatic echo and popup
                  corfu-popupinfo-delay nil)
      (corfu-mode 1)))
    :hook ((on-first-buffer . global-corfu-mode)
           (eshell-mode-hook . (lambda ()
                                 (setq-local corfu-quit-at-boundary t
                                             corfu-quit-no-match t
                                             corfu-auto nil)
                                 (corfu-mode)))))

  (use-package corfu-echo
    :hook (corfu-mode . corfu-echo-mode))

  (use-package corfu-popupinfo
    :hook (corfu-mode . corfu-popupinfo-mode))
#+end_src

*** kind-icon
#+begin_src emacs-lisp
  (use-package kind-icon
    :after corfu
    :config
    (setq kind-icon-use-icons t)
    (setq kind-icon-default-face 'corfu-default)
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
*** cape
#+begin_src emacs-lisp
  (use-package cape
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    (add-to-list 'completion-at-point-functions #'cape-ispell)
    (add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)
    )
#+end_src

[[https://github.com/SystemCrafters/crafted-emacs/blob/master/modules/crafted-completion.el][crafted-emacs/crafted-completion.el at master · SystemCrafters/crafted-emacs]]
#+begin_src emacs-lisp :tangle no
  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
#+end_src
*** prescient
#+begin_src emacs-lisp
  (autoload 'prescient-persist-mode "prescient" "" t)
  (add-hook 'after-init-hook 'prescient-persist-mode)

  (use-package vertico-prescient
    :hook (vertico-mode . vertico-prescient-mode))

  (use-package corfu-prescient
    :hook (corfu-mode . corfu-prescient-mode)
    :config
    (setq vertico-prescient-completion-styles '(orderless prescient partial-completion)))
#+end_src

*** COMMENT company
#+begin_src emacs-lisp :tangle no
  (add-hook 'after-init-hook 'global-company-mode)

  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1)
  (setq company-require-match nil)
  (setq company-icon-margin 3)
  (setq company-backends '((company-capf :with company-yasnippet)
                           (company-dabbrev-code company-keywords company-files)
                           ;; (company-ispell :separate)))
                           (company-dabbrev company-ispell :separate)))
  (add-hook 'company-mode-hook 'company-prescient-mode)
#+end_src

**** Company+
Company-box, Default company is good enough.
#+begin_src emacs-lisp :tangle no
  (when (maybe-require-package 'company-box)
    (add-hook 'company-mode-hook 'company-box-mode))
#+end_src

Company-posframe
#+begin_src emacs-lisp
  (add-hook 'company-mode-hook 'company-posframe-mode)
#+end_src

Company-quickhelp
#+begin_src emacs-lisp
  (add-hook 'company-mode-hook 'company-quickhelp-mode)
  (eval-after-load 'company
    '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))
#+end_src

* Misc
** gcmh
Emacs 的拉圾回收太影响性能，此包的作用是当 Emacs 处于 idle 状态时进行拉圾回收，正常使用的时候设置一个较高的阈值，降低垃圾回收。
#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (setq gcmh-idle-delay 'auto)
    (setq gcmh-auto-idle-delay-factor 10)
    (setq gcmh-high-cons-threshold #x1000000)
    :hook (after-init . gcmh-mode))
#+end_src

** file-info
#+begin_src emacs-lisp
  (use-package file-info
    :bind ("C-c f i" . file-info-show)
    :config
    (setq hydra-hint-display-type 'posframe)
    (setq hydra-posframe-show-params `(:poshandler posframe-poshandler-frame-center
                                                   :internal-border-width 2
                                                   :internal-border-color "#61AFEF"
                                                   :left-fringe 16
                                                   :right-fringe 16))

    (my/space-leader-def
      "fs" '(file-info-show :wk "File info")))
#+end_src
** disk-usage
#+begin_src emacs-lisp
  (use-package disk-usage
    :bind ("C-c d u" . disk-usage))
  (my/space-leader-def
    "d" '(:ignore t :wk "Disk")
    "du" '(disk-usage :wk "usage"))
#+end_src
** youtube-dl
#+begin_src emacs-lisp
  (use-package youtube-dl
    :commands youtube-dl
    :config
    (setq youtube-dl-directory "~/Downloads/")
    (setq youtube-dl-program "/opt/homebrew/bin/youtube-dl")
    (setq youtube-dl-arguments
          '("--no-mtime" "--restrict-filenames" "--format" "best" "--mark-watched")))
#+end_src
** OCR
#+begin_src emacs-lisp
  (defun my/ocr ()
  "OCR with Macos system."
    (interactive)
    (shell-command "shortcuts run \"OCR Selected Area\"")
    (do-applescript "tell application id \"org.gnu.Emacs\" to activate"))

  (my/comma-leader-def
    "o" '(my/ocr :wk "OCR"))
#+end_src
** proxy
#+begin_src emacs-lisp
  (defun toggle-proxy ()
    "Toggle proxy for the url.el library."
    (interactive)
    (if url-proxy-services
        (proxy-disable)
      (proxy-enable)))

  (defun proxy-enable ()
    "Enable proxy."
    (interactive)
    (setq url-proxy-services
          '(("http" . "127.0.0.1:8118")
            ("https" . "127.0.0.1:8118")
            ("socks" . "127.0.0.1:8118")
            ("no_proxy" . "0.0.0.0")))
    (message "Proxy enabled! %s" (car url-proxy-services)))

  (defun proxy-disable ()
    "Disable proxy."
    (interactive)
    (if url-proxy-services
        (setq url-proxy-services nil))
    (message "Proxy disabled!"))

  (run-with-idle-timer 2 nil (lambda ()
                               (proxy-enable)))
#+end_src
#+begin_src emacs-lisp :tangle no
  (my/comma-leader-def
    "p" '(toggle-proxy :wk "Proxy"))
#+end_src
** word-count
#+begin_src emacs-lisp
  (use-package advance-words-count
    :bind ("M-=" . advance-words-count))
#+end_src
* Emacs Works with Multiple Language, Piece of Cake
Emacs 在英文的学习、使用方面具有很大的帮助。

使用 Emacs 写文档可以自动检查拼写，需要用到的有 ~ispell~, ~flyspell~ 或者 ~wucuo-mode~. 对于具有错误的单词会有下划线提示，使用 ~flyspell-correct~ 进行修正。

对于不认识的单词可以使用 ~sdcv~ 或者 ~osx-dictionary~ 查询，对于读不懂的单词可以使用 ~go-translate~ 或者 ~lingva~ 或者 ~google-translate~ 进行中英文的互译。当然其他的语言也是可以的。

此外还可以使用 dictionary-overlay 直接渲染整个 buffer, 不认识的单词会直接显示中文意思。这个功能结合 ~eww~ 或者 ~elfeed~ 阅读网页的时候使用。

当不知道英文单词怎么写时可以使用 ~lsp-bridge-toggle-sdcv-helper~, 通过输入拼音来输入英语单词。对于想要查询近意词等时可以使用 ~powerthesaurus-lookup-dwim~ 来查找。

学习英语单词还可以结合 [[https://gitlab.com/phillord/org-drill][org-drll]] 或者 [[https://github.com/eyeinsky/org-anki][org-anki]] 进行，这里使用到的概念是 [[https://en.wikipedia.org/wiki/Forgetting_curve][Forgetting curve]].

** Ispell
#+begin_src emacs-lisp
  (use-package ispell
    :config
    (setq ispell-program-name "/opt/homebrew/bin/aspell")
    (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together"))
    (setq ispell-aspell-dict-dir
          (ispell-get-aspell-config-value "dict-dir"))

    (setq ispell-aspell-data-dir
          (ispell-get-aspell-config-value "data-dir"))

    (setq ispell-personal-dictionary (expand-file-name "config/ispell/.aspell.en.pws" my-galaxy))

    (setq-default ispell-following-word t
                  ispell-quietly t))
#+end_src

这里使用了[[https://github.com/cask/shut-up][cask/shut-up: Emacs, shut up would you!]] 来关闭一些错误提示。虽然其只是显示在 Message buffer 当中，但是看起来还是很不爽。
#+begin_src emacs-lisp
  ;; Suppress start looking process.
  ;; https://github.com/company-mode/company-mode/issues/912
  ;; shut-up
  (with-eval-after-load 'ispell
    (advice-add 'ispell-lookup-words :around
                (lambda (orig &rest args)
                  (shut-up (apply orig args)))))
#+end_src

** flyspell
Wucuo 在某个版本有提示 warning, 不知道产生的原因是什么。
#+begin_src emacs-lisp
  (use-package flyspell
    :hook (org-mode . flyspell-mode))
#+end_src

** COMMENT wucuo
Wucuo 的性能比 flyspell 好，其默认检查可见区域，而 flyspell 是检查整个 buffer, 这导致在比较大的文档中会产生较严重的卡顿，性能不行。

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook #'wucuo-start)
#+end_src
** flyspell-correct
#+begin_src emacs-lisp
  (use-package flyspell-correct
    :commands flyspell-correct-wrapper
    :bind ([remap flyspell-auto-correct-previous-word] . flyspell-correct-wrapper))
#+end_src
** langtool
MacOS 上使用需要安装 languagetool.
#+begin_src emacs-lisp
  (use-package langtool
    :commands langtool-check-buffer
    :config
    (setq langtool-http-server-host "localhost")
    (setq langtool-http-server-port 8081)
    (setq langtool-autoshow-message-function #'langtool-popup-autoshow))
#+end_src

** dictionary
Emacs 内置了 dictionary，默认是查询的 dict.org。
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("^\\*Dictionary\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (window-width . 70)))

  (global-set-key (kbd "M-#") 'dictionary-lookup-definition)
#+end_src
** go-translate
#+begin_src emacs-lisp
  (use-package go-translate
    :commands gts-do-translate
    :config
    (setq gts-buffer-follow-p t)
    (setq gts-translate-list '(("en" "zh")))
    (setq gts-default-translator (gts-translator
                                  :picker (gts-noprompt-picker)
                                  :engines (list
                                            (gts-google-engine :parser (gts-google-summary-parser)))
                                  :render (gts-buffer-render))))
  (my/space-leader-def
   "l" '(:ignore t :wk "Language")
   "ll" '(gts-do-translate :wk "Translate"))
#+end_src
** lingva
go-translate 的备用。
#+begin_src emacs-lisp
  (use-package lingva
    :commands lingva-translate
    :config
    (setq lingva-target "zh"))

  (my/space-leader-def
    "lL" '(lingva-translate :wk "Lingva"))
#+end_src

** sdcv
此 sdcv 来自 [[https://github.com/manateelazycat/sdcv/tree/master/][manateelazycat/sdcv: Emacs interface for sdcv (Stardict console version)]] 而不是 Melpa 上的。

关于 sdcv 的词典可以去这下载：[[http://download.huzheng.org/dict.org/][dictd-www.dict.org Dictionaries]]

默认的颜色不喜欢可以通过 ~face-spec-set~ 函数进行设置。
#+begin_src emacs-lisp
  (use-package sdcv
    :commands sdcv-search-pointer sdcv-search-input+
    :config
    (face-spec-set 'sdcv-tooltip-face
                   '((((background light))
                      :foreground "#000000" :background "#ffffff")
                     (t
                      :foreground "#ffffff" :background "#000000"))
                   'face-override-spec)

    (setq sdcv-tooltip-border-width 2)
    (setq sdcv-dictionary-data-dir (expand-file-name "sdcv-dict" user-emacs-directory))
    (setq sdcv-program "/opt/homebrew/bin/sdcv")
    (setq sdcv-dictionary-simple-list    ;星际译王屏幕取词词典, 简单, 快速
          '("懒虫简明英汉词典"
            "懒虫简明汉英词典"
            "KDic11万英汉词典"))
    (setq sdcv-dictionary-complete-list     ;星际译王的词典, 完全, 详细
          '("牛津英汉双解美化版"
            "懒虫简明英汉词典"
            "英汉汉英专业词典"
            "XDICT英汉辞典"
            "stardict1.3英汉辞典"
            "WordNet"
            "XDICT汉英辞典"
            "Jargon"
            "懒虫简明汉英词典"
            "FOLDOC"
            "新世纪英汉科技大词典"
            "KDic11万英汉词典"
            "朗道汉英字典5.0"
            "CDICT5英汉辞典"
            "新世纪汉英科技大词典"
            "21世纪双语科技词典"
            "quick_eng-zh_CN")))

  (my/space-leader-def
    "lp" '(sdcv-search-pointer :wk "SDCV Point")
    "li" '(sdcv-search-input+ :wk "SDCV Input"))

  (with-eval-after-load 'evil-collection
    (evil-collection-define-key 'normal 'sdcv-mode-map
      "q" 'quit-window))
#+end_src

** osx-dictionary
[[https://github.com/xuchunyang/osx-dictionary.el][xuchunyang/osx-dictionary.el: Mac OS X Dictionary.app interface for Emacs]]

这个是使用 MacOS 上自带的 dictionary 进行单词的查询，需要让 dictionary 后台运行，否则无结果显示。

#+begin_src emacs-lisp
  (use-package osx-dictionary
    :commands osx-dictionary-search-pointer)

  (my/space-leader-def
    "ld" '(osx-dictionary-search-pointer :wk "OSX dictionary"))
#+end_src
** powerthesaurus
这个的好处是可以用于查询同义词、反义词等等，用于替换单词比较方便。

需要实时在线查询，有时候结果返回的较慢。
#+begin_src emacs-lisp
  (use-package powerthesaurus
    :commands (powerthesaurus-lookup-dwim
               powerthesaurus-lookup-related-dwim
               powerthesaurus-lookup-synonyms-dwim
               powerthesaurus-lookup-antonyms-dwim
               powerthesaurus-lookup-definitions-dwim
               powerthesaurus-lookup-sentences-dwim))

  (my/space-leader-def
    "ls" '(:ignore t :wk "synosaurus")
    "lsl" '(powerthesaurus-lookup-dwim :wk "Dwim")
    "lsr" '(powerthesaurus-lookup-related-dwim :wk "Related")
    "lss" '(powerthesaurus-lookup-synonyms-dwim :wk "Synonyms")
    "lsa" '(powerthesaurus-lookup-antonyms-dwim :wk "Antonyms")
    "lsd" '(powerthesaurus-lookup-definitions-dwim :wk "Definitions")
    "lsj" '(powerthesaurus-lookup-sentences-dwim :wk "Sentences"))
#+end_src
** COMMENT dictionary-overlay
[[https://github.com/ginqi7/websocket-bridge][websocket-bridge]] and [[https://github.com/ginqi7/dictionary-overlay][dictionary-overlay]] can be used to learn English words.

我的日常使用流程是使用 ~SPC b r~ 来渲染 buffer, 使用 ~SPC l k~ 标记不认识的单词，使用 ~SPC l K~ 将单词标记为己知。

若通过单词查询的单词也自动标记为未知，下次渲染 buffer 时就会自动标出其词意。

这个功能在阅读 [[RSS]] 的时候十分的方便。
#+begin_src emacs-lisp
  (use-package dictonary-overlay
    :load-path "~/.emacs.d/packages/dictionary-overlay/"
    :commands (dictionary-overlay-mark-word-unknown
               dictionary-overlay-mark-word-known
               dictionary-overlay-toggle)
    :config
    (setq dictionary-overlay-translators '("local" "darwin" "sdcv" "web"))
    (setq dictionary-overlay-user-data-directory
          (expand-file-name "var/dictionary-overlay" user-emacs-directory)))

  ;; (add-to-list 'load-path "~/.emacs.d/lib/dictionary-overlay/")
  ;; (add-to-list 'load-path "~/.emacs.d/lib/websocket-bridge")
  ;; (run-with-idle-timer 2 nil (lambda ()
  ;;                                  (require 'websocket-bridge)
  ;;                                  (require 'dictionary-overlay)
  ;;                                  (dictionary-overlay-start)))

  ;; (with-eval-after-load 'dictionary-overlay
  ;;   (setq dictionary-overlay-translators '("local" "darwin" "sdcv" "web"))
  ;;   (setq dictionary-overlay-user-data-directory (expand-file-name "var/dictionary-overlay" user-emacs-directory))
  ;;   (with-eval-after-load 'osx-dictionary
  ;;     (advice-add 'osx-dictionary-search-pointer :after 'dictionary-overlay-mark-word-unknown))
  ;;   (with-eval-after-load 'sdcv
  ;;     (advice-add 'sdcv-search-input+ :after 'dictionary-overlay-mark-word-unknown)
  ;;     (advice-add 'sdcv-search-pointer :after 'dictionary-overlay-mark-word-unknown)))

  (my/space-leader-def
    "lk" '(dictionary-overlay-mark-word-unknown :wk "Mark word unknown")
    "lK" '(dictionary-overlay-mark-word-known :wk "Mark word known")
    "br" '(dictionary-overlay-toggle :wk "Toggle Render buffer"))
#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :hook (prog-mode . flycheck-mode))
#+end_src
** flycheck-grammarly
langtool 也可以检查语法，相比较 grammarly，不需要连网，所以速度较快。
自动开启此功能导致在文档较大时有明显的卡顿感，手动开启语法检查较好。
#+begin_src emacs-lisp
  (use-package flycheck-grammarly
    :after flycheck
    :commands flycheck-grammarly-setup)
#+end_src

** shortcut
在 MacOS 可以调用 shortcut 使用系统翻译功能。

此处仅做记录，我不怎么使用。具体的见 [[https://emacs-china.org/t/emacs-macos/23268][Emacs+macOS 最简单也最强大的中英互译设置，不只英语 - Emacs-general - Emacs China]].
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               (cons
                "\\*Async Shell Command\\*.*"
                (cons #'display-buffer-no-window nil)))

  (defun my/siri-translate ()
    (interactive)
    (let ((tempfile (make-temp-file "siri-translate-" nil ".txt")))
      (write-region
       (format "%s" (thing-at-point 'paragraph)) nil tempfile)
      (end-of-paragraph-text)
      (shell-command (format "shortcuts run \"Translate File\" -i %s &" tempfile)))
    (shell-command "open -b org.gnu.Emacs"))

  (defun my/siri-translate2english ()
    (interactive)
    (let ((tempfile (make-temp-file "siri-translate-" nil ".txt")))
      (write-region
       (format "%s" (thing-at-point 'paragraph)) nil tempfile)
      (end-of-paragraph-text)
      (shell-command (format "shortcuts run \"Translate File 2 English\" -i %s &" tempfile)))
    (shell-command "open -b org.gnu.Emacs"))

  (defun language-to-zh-or-zh-to-english ()
    (interactive)
    (let ((string (thing-at-point 'paragraph)))
      (if (eq (string-match "\\cC" string) nil)
          (my/siri-translate)
        (my/siri-translate2english))))
#+end_src

** LSP

*** eglot
#+begin_src emacs-lisp
  (with-eval-after-load 'yasnippet
    (add-hook 'LaTeX-mode-hook 'eglot-ensure))
#+end_src
*** COMMENT lsp-bridge
#+begin_src emacs-lisp
  ;; lsp-bridge-toggle-sdcv-helper use pinyin to search english words,
  ;; need to deactivate rime input method before search words.
  (autoload 'lsp-bridge-toggle-sdcv-helper "lsp-bridge" "" t)
  (defun my/deactivate-input-method-sdcv-helper ()
    "Deactivate input method when sdcv helper enabled."
    (if acm-enable-search-sdcv-words
        (deactivate-input-method)))

  (advice-add 'lsp-bridge-toggle-sdcv-helper :after 'my/deactivate-input-method-sdcv-helper)

  ;; Disable sdcv helper after exit insert state if acm-enable-search-sdcv-words is true.
  (with-eval-after-load 'lsp-bridge
    (add-hook 'evil-insert-state-exit-hook (lambda ()
                                             (if acm-enable-search-sdcv-words
                                                 (lsp-bridge-toggle-sdcv-helper)))))
#+end_src
#+begin_src emacs-lisp
  (my/space-leader-def
    "lh" '(lsp-bridge-toggle-sdcv-helper :wk "Sdcv help"))
#+end_src
** markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode)
           ("README\\.md\\'" . gfm-mode))
    :init (setq markdown-command "multimarkdown")
    :bind (:map markdown-mode-map
           ("C-c C-e" . markdown-do)))

  ;; (with-eval-after-load 'whitespace-cleanup-mode
  ;;   (add-to-list 'whitespace-cleanup-mode-ignore-modes 'markdown-mode))
#+end_src

** COMMENT Python
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("poetry\\.lock\\'" . toml-mode))
#+end_src

* Organize Life with Plain Text, High Effective System
** org-mode
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-ellipsis " ⇲")
    (setq org-modules '()
          org-imenu-depth 4
          org-return-follows-link t
          org-image-actual-width nil
          org-display-remote-inline-images 'download
          org-log-into-drawer t
          org-fast-tag-selection-single-key 'expert
          org-adapt-indentation nil
          org-fontify-quote-and-verse-blocks t
          org-support-shift-select t
          org-treat-S-cursor-todo-selection-as-state-change nil
          org-hide-leading-stars nil
          org-startup-with-inline-images t
          org-image-actual-width '(500)
          org-use-speed-commands t)
    (setq org-enforce-todo-dependencies t)
    (setq org-enforce-todo-checkbox-dependencies t)

    (setq org-todo-repeat-to-state t)
    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "INPROGRESS(i)" "|" "WAIT(w@)" "SOMEDAY(s@)" "CNCL(c@/!)" "DONE(d)")))
    (setq org-todo-state-tags-triggers
          (quote (("CNCL" ("CNCL" . t))
                  ("WAIT" ("WAIT" . t))
                  ("SOMEDAY" ("WAIT") ("SOMEDAY" . t))
                  (done ("WAIT") ("SOMEDAY"))
                  ("TODO" ("WAIT") ("CNCL") ("SOMEDAY"))
                  ("NEXT" ("WAIT") ("CNCL") ("SOMEDAY"))
                  ("DONE" ("WAIT") ("CNCL") ("SOMEDAY")))))
    :bind (:map org-mode-map
                ("C-c l" . org-store-link)))
                ;; ("<return>" . org-return)))
#+end_src
*** Babel
以下配置来源：https://emacs-china.org/t/org-babel/18699

禁用 org babel 加载的语言可以有效的提高 Emacs 的启动速度。
#+begin_example
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)))
#+end_example
#+begin_src emacs-lisp
  (use-package ob-core
    :after org
    :config
    (defun my/org-babel-execute-src-block (&optional _arg info _params)
      "Load language if needed"
      (let* ((lang (nth 0 info))
             (sym (if (member (downcase lang) '("c" "cpp" "c++")) 'C (intern lang)))
             (backup-languages org-babel-load-languages))
        (unless (assoc sym backup-languages)
          (condition-case err
              (progn
                (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t)))
                (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages)))
            (file-missing
             (setq-default org-babel-load-languages backup-languages)
             err)))))
    (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block)
    (setq org-confirm-babel-evaluate nil))
#+end_src

*** org-capture
#+begin_src emacs-lisp
  (use-package org-capture
    :after org
    :bind (:map org-capture-mode-map
                ([remap evil-save-and-close] . org-capture-finalize)
                ([remap evil-save-modified-and-close] . org-capture-finalize)
                ([remap evil-quit] . org-capture-kill)
                ("RET" . org-capture-finalize))
    :config
    (setq org-capture-templates
          '(("i" "Inbox"
             plain (file+olp+datetree (lambda () (concat my-galaxy "/inbox/inbox.org")))
             "**** %?\n%U\n" :time-prompt t :tree-type week)
            ("p" "Daily Plan"
             plain (file+olp+datetree (lambda () (concat my-galaxy "/inbox/plan.org")))
             "- [ ] %?\n%U\n" :time-prompt t :tree-type week)
            ("r" "Reflection"
             plain
             (file+olp+datetree (lambda () (concat my-galaxy "/roam/main/reflection.org")))
             (file "~/.emacs.d/template/tpl-daily-reflection")
             :time-prompt t :tree-type week)
            ("a" "Anki Deck")
            ("ae" "Deck: English"
             entry (file (lambda ()
                           (concat my-galaxy "/anki/anki_english.org")))
             "* %?\n" :jump-to-captured t)
            ("ac" "Deck: Civil Engineering"
             entry (file (lambda ()
                           (concat my-galaxy "/anki/anki_engineering.org")))
             "* %?\n" :jump-to-captured t)
            ("s" "Code snippets"
             entry (file (lambda ()
                           (concat my-galaxy "/scripts/snippets.org")))
             "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")
            ;; ("l" "Lists")
            ("m" "Movie"
             entry (file+headline (lambda () (concat my-galaxy "/roam/main/watchlist.org")) "Watching Lists")
             "* %?
  :PROPERTIES:
  :GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller}
  :COUNTRY:
  :SCORE:
  :PLOT: %^{PLOT}
  :END:"))))
#+end_src

由于使用了 org-roam 的自动弹出功能，导致 org-capture 的时候光标未能正常的跳转到 org-capture 的窗口当中，使用下面的方法来规避这个问题。
#+begin_src emacs-lisp
  (defun my/org-capture ()
    "Make a new frame to do org-capture staff."
    (interactive)
    (make-frame)
    (org-capture))

  (add-hook 'org-capture-after-finalize-hook 'delete-frame)

  (add-to-list 'display-buffer-alist '("\\*Org Select\\*"
                                       (display-buffer-pop-up-frame)
                                       (window-parameters
                                        (no-other-window . t)
                                        (mode-line-format . none)
                                        (no-delete-other-windows . t))))

  (global-set-key (kbd "<f10>") 'my/org-capture)
#+end_src

*** org-archive
#+begin_src emacs-lisp
  (use-package org-archive
    :after org
    :init
    (setq org-archive-location (expand-file-name "todos/gtd_archive.org::datetree/" my-galaxy))

    (defun my/gtd-archive ()
      "Archive tasks to specific file."
      (interactive)
      (find-file (expand-file-name "todos/gtd_archive.org" my-galaxy)))
    (my/space-leader-def
      "foa" '(my/gtd-archive :wk "Archive File")))
#+end_src

*** org-attach
POST：[[https://fuco1.github.io/2023-02-08-Visit-the-org-headline-from-the-attach-dired-buffer.html][Visit the org headline from the attach dired buffer]]
通常不需要管理附件在文件夹中是怎么存放的，找到 heading 就可以找到对应的附件。
或者当在 =dired= 中查看 =attach= 文件夹中的附件时，可以使用 ~my/org-attach-visit-heading-from-dired~ 函数跳转到对应的 heading 位置。
#+begin_src emacs-lisp
  (use-package org-attach
    :config
    (setq org-attach-id-dir (expand-file-name "attach" my-galaxy))
    (defun my/org-attach-visit-headline-from-dired ()
      "Go to the headline corresponding to this org-attach directory."
      (interactive)
      (let* ((id-parts (last (split-string default-directory "/" t) 2))
             (id (apply #'concat id-parts)))
        (let ((m (org-id-find id 'marker)))
          (unless m (user-error "Cannot find entry with ID \"%s\"" id))
          (pop-to-buffer (marker-buffer m))
          (goto-char m)
          (move-marker m nil)
          (org-fold-show-context))))
    (add-to-list 'display-buffer-alist
                 '("\\*Org Attach\\*"
                   (display-buffer-pop-up-frame)
                   (side . right)
                   (slot . 0)
                   (window-width . 0.5)
                   (window-parameters . ((no-other-window . t)
                                         (no-delete-other-windows . t)))))
    :bind (:map dired-mode-map
                ("C-'" . my/org-attach-visit-headline-from-dired)))
#+end_src
#+begin_src emacs-lisp :tangle no
  (defun my/copy-or-move-file-to-buffer-dir
      (file-name &optional arg)
    "Copy or move the FILE-NAME to the directory of the buffer's file.\n
  With prefix argument ARG, copy the file instead of moving it."
    (interactive "FFile to move: \nP")
    (let ((new-file-name (concat (file-name-directory (buffer-file-name))
                                 (file-name-nondirectory file-name))))
      (if (not (file-exists-p file-name))
          (error "File does not exist: %s" file-name)
        (if (file-exists-p new-file-name)
            (error "File already exists: %s" new-file-name)
          (progn
            (let ((command (if arg 'copy-file 'rename-file )))
              (funcall command file-name new-file-name t))
            (if arg
                (find-file-noselect new-file-name)
              (progn
                  (kill-buffer (current-buffer))
                  (delete-file file-name)))
            (message "File %s to %s"
                     (if arg "moved" "copied")
                     new-file-name))))))
#+end_src

*** org-habit
#+begin_src emacs-lisp
  (use-package org-habit
    :after org-agenda
    :config
    (add-to-list 'org-modules 'org-habit t))
#+end_src

*** org-id
#+begin_src emacs-lisp
  (use-package org-id
    :after org
    :config
    (setq org-id-method 'ts)
    (setq org-id-link-to-org-use-id 'create-if-interactive)
    (defun my/copy-idlink ()
      "Copy idlink to clipboard."
      (interactive)
      (when (eq major-mode 'org-agenda-mode) ;switch to orgmode
        (org-agenda-show)
        (org-agenda-goto))
      (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
        (let* ((mytmphead (nth 4 (org-heading-components)))
               (mytmpid (funcall 'org-id-get-create))
               (mytmplink (format "- [ ] [[id:%s][%s]]" mytmpid mytmphead)))
          (kill-new mytmplink)
          (message "Copied %s to killring (clipboard)" mytmplink))))
    :bind ("<f7>" . my/copy-idlink))

  (my/space-leader-def
    "oi" '(org-id-get-create :wk "Create ID"))
#+end_src

*** org-src
#+begin_src emacs-lisp
  (use-package org-src
    :after org
    :config
    (setq org-src-window-setup 'current-window)
    (setq org-src-ask-before-returning-to-edit-buffer nil))
#+end_src
*** org-refile
#+begin_src emacs-lisp
  (use-package org-refile
    :after org
    :config
    (setq org-refile-targets '((nil :maxlevel . 9)
                               (org-agenda-files :maxlevel . 9)))
    (setq org-refile-use-outline-path t)
    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-allow-creating-parent-nodes 'confirm)
    (setq org-refile-use-outline-path 'file)
    (setq org-refile-active-region-within-subtree t))
#+end_src

*** org-emphasis-alist
此处的设置来源：https://protesilaos.com/emacs/modus-themes

若升级 modus-themes 到 4.0 的版本，可能需要修改。
#+begin_src emacs-lisp
  (use-package org
    :config
    (defface my-org-emphasis-bold
      '((default :inherit bold)
        (((class color) (min-colors 88) (background light))
         :foreground "#a60000")
        (((class color) (min-colors 88) (background dark))
         :foreground "#ff8059"))
      "My bold emphasis for Org.")

    (defface my-org-emphasis-italic
      '((default :inherit italic)
        (((class color) (min-colors 88) (background light))
         :foreground "#005e00")
        (((class color) (min-colors 88) (background dark))
         :foreground "#44bc44"))
      "My italic emphasis for Org.")

    (defface my-org-emphasis-underline
      '((default :inherit underline)
        (((class color) (min-colors 88) (background light))
         :foreground "#813e00")
        (((class color) (min-colors 88) (background dark))
         :foreground "#d0bc00"))
      "My underline emphasis for Org.")

    (defface my-org-emphasis-strike-through
      '((default :strike-through t)
        (((class color) (min-colors 88) (background light))
         :foreground "#505050")
        (((class color) (min-colors 88) (background dark))
         :foreground "#a8a8a8"))
      "My strike-through emphasis for Org.")

    (defface my-org-emphasis-strike-through
      '((((class color) (min-colors 88) (background light))
         :strike-through "#972500" :foreground "#505050")
        (((class color) (min-colors 88) (background dark))
         :strike-through "#ef8b50" :foreground "#a8a8a8"))
      "My strike-through emphasis for Org.")

    (setq org-emphasis-alist
          '(("*" my-org-emphasis-bold)
            ("/" my-org-emphasis-italic)
            ("_" my-org-emphasis-underline)
            ("=" org-verbatim verbatim)
            ("~" org-code verbatim)
            ("+" my-org-emphasis-strike-through))))
#+end_src

*** org-clock
#+begin_src emacs-lisp
  (use-package org-clock
    :after org
    :config
    (org-clock-persistence-insinuate)
    (setq org-clock-history-length 23)
    (setq org-clock-in-resume t)
    (setq org-clock-into-drawer "LOGCLOCK")
    (setq org-clock-out-remove-zero-time-clocks t)
    (setq org-clock-out-when-done t)
    (setq org-clock-persist t)
    (setq org-clock-clocktable-default-properties '(:maxlevel 5 :link t :tags t))
    (setq org-clock-persist-query-resume nil)
    (setq org-clock-report-include-clocking-task t))

  (my/space-leader-def
    "oc" '(:ignore t :wk "Clock")
    "ocj" '(org-clock-goto :wk "Clock goto")
    "oci" '(org-clock-in :wk "Clock In")
    "oco" '(org-clock-out :wk "Clock Out")
    "ocl" '(org-clock-in-last :wk "Clock In Last"))
#+end_src

Punch in or out.
#+begin_src emacs-lisp
  (setq bh/keep-clock-running nil)

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask."
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))
  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask."
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))
  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any."
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))
  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
   Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))
  (defun bh/clock-in-to-next (kw) ;; kw should not been deleted.
    "Switch a task from TODO to NEXT when clocking in.
   Skips capture tasks, projects, and subprojects.
   Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))
  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the selected task.
   If `ARG' is nil, set the Organization task
   as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-default-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
                                          ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-default-task-as-default)))))
  (defun bh/punch-out ()
    "Punch out."
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))
  (defun bh/clock-in-default-task ()
    "Clock In default task with specific ID."
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))
  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in."
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))
  (defvar bh/default-task-id "20220524T114723.420565")
  (defun bh/clock-in-default-task-as-default ()
    "Clock in default task."
    (interactive)
    (org-with-point-at (org-id-find bh/default-task-id 'marker)
      (org-clock-in '(16))))
  (defun bh/clock-out-maybe ()
    "Clock out."
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

  (defun bh/clock-in-last-task (arg)
    "Clock in the interrupted task if there is one.
   Skip the default task and get the next one.
   A prefix `ARG' forces clock in of the default task."
    (interactive "p")
    (let ((clock-in-to-task
           (cond
            ((eq arg 4) org-clock-default-task)
            ((and (org-clock-is-active)
                  (equal org-clock-default-task (cadr org-clock-history)))
             (caddr org-clock-history))
            ((org-clock-is-active) (cadr org-clock-history))
            ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
            (t (car org-clock-history)))))
      (widen)
      (org-with-point-at clock-in-to-task
        (org-clock-in nil))))

  (defun my/toggle-punch-in-or-out ()
    "Start clock or stop it when there is a clocking."
    (interactive)
    (if (org-clocking-p)
        (progn
          (bh/punch-out)
          (alert "Wish you have a good day!" :title "Punch Out"))
      (progn
        (bh/punch-in nil)
        (alert "Start Working: Fighting" :title "Punch In" ))))

  (my/comma-leader-def
    "i" '(my/toggle-punch-in-or-out :wk "Punch In or Out"))
#+end_src

*** org buffer
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*Org Note\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 0.5)
                 (window-parameters . ((no-other-window . t)
                                       (no-delete-other-windows . t)))))
#+end_src
*** ol
#+begin_src emacs-lisp
  (use-package ol
    :config
    (setq org-link-frame-setup '((vm . vm-visit-folder-other-frame)
                                 (vm-imap . vm-visit-imap-folder-other-frame)
                                 (gnus . org-gnus-no-new-news)
                                 (file . find-file)
                                 (wl . wl-other-frame))))
#+end_src
*** org-header
**** Auto calc clock tables
这个用于 clocktable 进行任务时间的汇总比较，目前我用它来统计一年的读书时长计录，及一年读了哪些书。
#+begin_src emacs-lisp
  ;; https://200ok.ch/posts/2022-12-07_streamline_your_org_mode_workflow_with_automatic_clock_table_recalculation.html
  ;; Need add #+AUTOCALC_CLOCK_TABLES to org file.
  (with-eval-after-load 'org
    (add-to-list 'org-options-keywords "AUTOCALC_CLOCK_TABLES:"))

  (defun autocalc-clocktable ()
    "Auto update clock table."
    (when (derived-mode-p 'org-mode)
      (save-excursion
        (goto-char 0)
        (if (string-equal (car
                           (cdr
                            (car
                             (org-collect-keywords '("AUTOCALC_CLOCK_TABLES")))))
                          "t")
            (progn
              (goto-char (search-forward "clocktable"))
              (org-ctrl-c-ctrl-c))))))

  (add-hook 'before-save-hook 'autocalc-clocktable)
#+end_src
**** Auto update DATE
#+begin_src emacs-lisp
  (defun my/org-find-time-file-property (property &optional anywhere)
    "Return the position of the time file PROPERTY if it exists.
  When ANYWHERE is non-nil, search beyond the preamble."
    (save-excursion
      (goto-char (point-min))
      (let ((first-heading
             (save-excursion
               (re-search-forward org-outline-regexp-bol nil t))))
        (when (re-search-forward (format "^#\\+%s:" property)
                                 (if anywhere nil first-heading)
                                 t)
          (point)))))

  (defun my/org-set-time-file-property (property &optional anywhere pos)
    "Set the time file PROPERTY in the preamble.
  When ANYWHERE is non-nil, search beyond the preamble.
  If the position of the file PROPERTY has already been computed,
  it can be passed in POS.

  https://github.com/zaeph/.emacs.d/blob/615ac37be6bd78c37e967fdb43d28897a4116583/lisp/zp-org.el#L194"
    (when-let ((pos (or pos
                        (my/org-find-time-file-property property))))
      (save-excursion
        (goto-char pos)
        (if (looking-at-p " ")
            (forward-char)
          (insert " "))
        (delete-region (point) (line-end-position))
        (let* ((now (format-time-string "[%Y-%m-%d %a %H:%M]")))
          (insert now)))))

  (defun my/org-set-date ()
    "Update the LAST_MODIFIED file property in the preamble.
  https://github.com/zaeph/.emacs.d/blob/615ac37be6bd78c37e967fdb43d28897a4116583/lisp/zp-org.el#L212"
    (when (and (derived-mode-p 'org-mode)
               (buffer-modified-p))
      (my/org-set-time-file-property "DATE")))

  (add-hook 'before-save-hook 'my/org-set-date)
#+end_src
** ekg
轻度尝试，目前还有很多的不足，日常使用不太够。
和其他的模块不能很好的合作，如 org-agenda，math-preview。
#+begin_src emacs-lisp
  (use-package ekg
    :commands (ekg-show-notes-in-trash
               ekg-show-notes-for-today
               ekg-show-notes-with-tag
               ekg-show-notes-with-all-tags
               ekg-show-notes-with-any-tags
               ekg-show-rename-tag
               ekg-browse-url)
    :bind (("<f9>" . ekg-capture)
           ("M-<f9>" . ekg-capture-url))
    :general
    (evil-define-key 'motion ekg-notes-mode-map
      "q" 'quit-window)
    :config
    (setq triples-default-database-filename (expand-file-name "ekg/triples.db" my-galaxy)))

  (add-to-list 'display-buffer-alist '("\\*EKG"
                                         (display-buffer-pop-up-frame)
                                         (window-parameters
                                          (no-other-window . t)
                                          (mode-line-format . none)
                                          (no-delete-other-windows . t))))
  (my/space-leader-def
    "e" '(:ignore t :wk "EKG")
    "ee" '(ekg-show-notes-with-tag :wk "With TAG")
    "ed" '(ekg-show-notes-for-today :wk "Today")
    "eA" '(ekg-show-notes-with-all-tags :wk "All TAG")
    "ea" '(ekg-show-notes-with-any-tags :wk "Any TAG")
    "et" '(ekg-show-notes-in-trash :wk "Trash")
    "er" '(ekg-rename-tag :wk "Rename TAG")
    "eb" '(ekg-browse-url :wk "Open URL"))
#+end_src
** org-roam
readinglog 和 reference 模板见 [[./template/]] 文件夹。

Org-roam 默认会缓存所有的节点（文件或标题），若要排除不需要的节点可以使用 =ROAM_EXCLUDE= 关键字或者使用 =org-roam-db-node-include-function= 函数。

#+begin_example
  (setq org-roam-db-node-include-function
        (lambda ()
          (not (member "ATTACH" (org-get-tags)))))
#+end_example

#+begin_src emacs-lisp
  (use-package org-roam
    :commands org-roam-node-find
    :init
    (setq org-roam-directory (file-truename (expand-file-name "roam" my-galaxy)))
    :hook ((on-first-input . org-roam-db-autosync-mode)
           (org-mode . (lambda () (setq-local time-stamp-active t
                                         time-stamp-start "#\\+MODIFIED:[ \t]*"
                                         time-stamp-end "$"
                                         time-stamp-format "\[%Y-%m-%d %3a %H:%M\]")
                         (add-hook 'before-save-hook 'time-stamp nil 'local))))
    :config
    (setq org-roam-database-connector 'sqlite)
    (setq org-roam-db-gc-threshold most-positive-fixnum)
    (setq org-roam-mode-sections
          '((org-roam-backlinks-section :unique t)
            org-roam-reflinks-section
            org-roam-unlinked-references-section))

    (cl-defmethod org-roam-node-type ((node org-roam-node))
      "Return the TYPE of NODE."
      (condition-case nil
          (file-name-nondirectory
           (directory-file-name
            (file-name-directory
             (file-relative-name (org-roam-node-file node) org-roam-directory))))
        (error "")))

    (cl-defmethod org-roam-node-directories ((node org-roam-node))
      (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
          (format "(%s)" (car (split-string dirs "/")))
        ""))

    (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
      (let* ((count (caar (org-roam-db-query
                           [:select (funcall count source)
                                    :from links
                                    :where (= dest $s1)
                                    :and (= type "id")]
                           (org-roam-node-id node)))))
        (format "[%d]" count)))

    (cl-defmethod org-roam-node-doom-filetitle ((node org-roam-node))
      "Return the value of \"#+title:\" (if any) from file that NODE resides in.
           If there's no file-level title in the file, return empty string."
      (or (if (= (org-roam-node-level node) 0)
              (org-roam-node-title node)
            (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
          ""))

    (cl-defmethod org-roam-node-doom-hierarchy ((node org-roam-node))
      "Return hierarchy for NODE, constructed of its file title, OLP and direct title.
           If some elements are missing, they will be stripped out."
      (let ((title     (org-roam-node-title node))
            (olp       (org-roam-node-olp   node))
            (level     (org-roam-node-level node))
            (filetitle (org-roam-node-doom-filetitle node))
            (separator (propertize " > " 'face 'shadow)))
        (cl-case level
          ;; node is a top-level file
          (0 filetitle)
          ;; node is a level 1 heading
          (1 (concat (propertize filetitle 'face '(shadow italic))
                     separator title))
          ;; node is a heading with an arbitrary outline path
          (t (concat (propertize filetitle 'face '(shadow italic))
                     separator (propertize (string-join olp " > ") 'face '(shadow italic))
                     separator title)))))

    ;; 获得文件的修改时间.
    (cl-defmethod org-roam-node-date ((node org-roam-node))
      (format-time-string "%Y-%m-%d" (org-roam-node-file-mtime node)))

    (setq org-roam-node-display-template
          (concat "${type:4} ${backlinkscount:3} "
                  (propertize "${doom-hierarchy:*}" 'face 'org-level-3)
                  (propertize "${tags:20}" 'face 'org-tag)
                  " "))

    (setq org-roam-capture-templates
          '(("a" "articles" plain "%?"
             :target (file+head "articles/${slug}.org"
                                "#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n")
             :unnarrowed t)
            ("b" "Books" plain (file "~/.emacs.d/template/readinglog")
             :target (file+head "books/${slug}.org"
                                "#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n")
             :unnarrowed t)
            ("d" "Diary" plain "%?"
             :target (file+datetree "daily/<%Y-%m>.org" day))
            ("m" "main" plain "%?"
             :target (file+head "main/${slug}.org"
                                "#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n")
             :unnarrowed t)
            ("p" "people" plain (file "~/.emacs.d/template/crm")
             :target (file+head "crm/${slug}.org"
                                "#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n")
             :unnarrowed t)
            ("r" "reference" plain (file "~/.emacs.d/template/reference")
             :target (file+head "ref/${citekey}.org"
                                "#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n")
             :unnarrowed t)
            ("s" "sources" plain "%?"
             :target (file+head "sources/${slug}.org"
                                "#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n")
             :unnarrowed t)
            ("w" "work" plain "%?"
             :target (file+head "work/${slug}.org"
                                "#+TITLE: ${title}\n#+CREATED: %U\n#+MODIFIED: \n")
             :unnarrowed t)))

    (defun my/org-roam-buffer-show (_)
      (when (and
             (not (minibufferp))
             (not (> 120 (frame-width)))
             (not (derived-mode-p 'calendar-mode))
             (not (derived-mode-p 'org-agenda-mode))
             (xor (org-roam-file-p) (eq 'visible (org-roam-buffer--visibility))))
        (org-roam-buffer-toggle)))

    (add-hook 'window-buffer-change-functions 'my/org-roam-buffer-show)

    (add-to-list 'display-buffer-alist
                 '("\\*org-roam\\*"
                   (display-buffer-reuse-window display-buffer-in-side-window)
                   (side . right)
                   (slot . 0)
                   (window-width . 0.35)
                   (window-parameters
                    (mode-line-format . none)
                    (no-other-window . t)
                    (no-delete-other-windows . t)))))
  (my/space-leader-def
    "n" '(:ignore t :wk "Notes")
    "nr" '(org-roam-node-random :wk "Random node")

    "nf" '(org-roam-node-find :wk "Find node")
    "ni" '(org-roam-node-insert :wk "Insert node")

    "na" '(org-roam-alias-add :wk "Add alias")
    "nA" '(org-roam-alias-remove :wk "Remove alias")

    "nt" '(org-roam-tag-add :wk "Add tag")
    "nT" '(org-roam-tag-remove :wk "Remove tag")

    "nd" '(org-roam-dailies-goto-today :wk "Goto today"))

  (my/space-leader-def
    "r" '(:ignore t :wk "References")
    "ra" '(org-roam-ref-add :wk "Ref add")
    "rf" '(org-roam-ref-find :wk "Ref find")
    "rr" '(org-roam-ref-remove :wk "Ref remove"))
#+end_src
#+begin_src emacs-lisp
  (use-package org
    :after evil
    :config
    (defun gpc/open-node-roam-ref-url ()
      "Open the URL in this node's ROAM_REFS property, if one exists."
      (interactive)
      (when-let ((ref-url (org-entry-get-with-inheritance "ROAM_REFS")))
        (browse-url ref-url)))

    (evil-collection-define-key 'normal 'org-mode-map
      "zr" 'gpc/open-node-roam-ref-url))
#+end_src

*** org-roam-ui
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :commands org-roam-ui-open
    :config
    (setq org-roam-ui-sync-theme t)
    (setq org-roam-ui-follow t)
    (setq org-roam-ui-update-on-save t)
    (setq org-roam-ui-open-on-start t))

  (my/space-leader-def
    "nu" '(:ignore :wk "Roam UI")
    "nuu" '(org-roam-ui-open :wk "Open")
    "nuz" '(org-roam-ui-node-zoom :wk "Node zoom"))
#+end_src

*** consult-org-roam
这个包提供了 3 个有用的函数，可以方便的进行链接的 forward 和 backlink 的跳转，以及进行内容的查找。
#+begin_src emacs-lisp
  (use-package consult-org-roam
    :commands (consult-org-roam-backlinks consult-org-roam-forward-links))

  (my/space-leader-def
    "ns" '(consult-org-roam-search :wk "Search"))

  (with-eval-after-load 'evil
    (evil-collection-define-key 'normal 'org-mode-map
      "zb" 'consult-org-roam-backlinks
      "zf" 'consult-org-roam-forward-links))
#+end_src

*** consult-notes
这个包结合 denote 比较好用，不需要结合 org-roam 使用。

因为我己经不使用 deft 而是使用 consult-notes 来管理自己写的博客。使用下面的函数来创建新的文章， consult-notes 只能用于查询，无新建文件的功能。
#+begin_src emacs-lisp
  (use-package consult-notes
    :commands consult-notes
    :config
    (setq consult-notes-file-dir-sources
          `(("Articles"  ?a  ,(concat my-galaxy "/articles")))))
  (defun my/new-article (article)
      (interactive "sTitle: ")
      (let ((filename (format "%s" article))
            (ext ".org"))
        (find-file (concat my-galaxy "/articles/" filename ext))
        (insert "#+TITLE: " article "\n")
        (tempel-insert 'hugo)))

  (my/space-leader-def
      "nc" '(my/new-article :wk "Create article")
      "nn" '(consult-notes :wk "Consult notes"))

  (use-package consult-notes-org-roam
    :commands consult-notes-org-roam-find-node-relation)

  (my/space-leader-def
      "nv" '(consult-notes-org-roam-find-node-relation :wk "Node navigation"))
#+end_src

*** org-transclusion
这里需要结合 [[fringe-mode]] 使用，不能完全隐藏 fringe, 否则会没有效果。我设置的是 minimal.
#+begin_src emacs-lisp
  (use-package org-transclusion
    :commands (org-transclusion-make-from-link org-transclusion-add org-transclusion-add-all)
    :config
    (face-spec-set 'org-transclusion-fringe
                   '((((background light))
                      :foreground "black")
                     (t
                      :foreground "white"))
                   'face-override-spec)
    (face-spec-set 'org-transclusion-source-fringe
                   '((((background light))
                      :foreground "black")
                     (t
                      :foreground "white"))
                   'face-override-spec))
  (my/space-leader-def
    "ot" '(:ignore t :wk "Transclusion")
    "ota" '(org-transclusion-add :wk "Add")
    "otA" '(org-transclusion-add-all :wk "Add all")
    "otr" '(org-transclusion-remove :wk "Remove")
    "otR" '(org-transclusion-remove-all :wk "Remove all")
    "otg" '(org-transclusion-refresh :wk "Refresh")
    "otm" '(org-transclusion-make-from-link :wk "Make link")
    "oto" '(org-transclusion-open-source :wk "Open source")
    "ote" '(org-transclusion-live-sync-start :wk "Edit live"))
#+end_src

** dynamic org-agenda
vulpea to build dynamic agenda.
#+begin_src emacs-lisp
  ;; (autoload 'vulpea-buffer-tags-get "vulpea" "" t) ;
  ;; (autoload 'vulpea-buffer-tags-add "vulpea" "" t)
  ;; (autoload 'vulpea-buffer-tags-remove "vulpea" "" t)
  ;; (autoload 'vulpea-buffer-prop-set "vulpea" "" t)
  ;; (autoload 'vulpea-buffer-prop-get "vulpea" "" t)
  ;; (autoload 'vulpea-buffer-prop-set-list "vulpea" "" t)
  ;; (autoload 'vulpea-buffer-prop-get-list "vulpea" "" t)
  (use-package vulpea
    :after org-roam
    :config
    (defun vulpea-project-p ()
      "Return non-nil if current buffer has any todo entry.
    TODO entries marked as done are ignored, meaning the this
    function returns nil if current buffer contains only completed
    tasks."
      (seq-find                                 ; (3)
       (lambda (type)
         (or (eq type 'todo)
             (eq type 'done)))
       (org-element-map                         ; (2)
           (org-element-parse-buffer 'headline) ; (1)
           'headline
         (lambda (h)
           (org-element-property :todo-type h)))))

    (defun vulpea-buffer-p ()
      "Return non-nil if the currently visited buffer is a note."
      (and buffer-file-name
           (string-prefix-p
            (expand-file-name (file-name-as-directory org-roam-directory))
            (file-name-directory buffer-file-name))))

    (defun vulpea-project-update-tag ()
      "Update PROJECT tag in the current buffer."
      (when (and (not (active-minibuffer-window))
                 (vulpea-buffer-p))
        (save-excursion
          (goto-char (point-min))
          (let* ((tags (vulpea-buffer-tags-get))
                 (original-tags tags))
            (if (vulpea-project-p)
                (setq tags (cons "project" tags))
              (setq tags (remove "project" tags)))
            ;; cleanup duplicates
            (setq tags (seq-uniq tags))
            ;; update tags if changed
            (when (or (seq-difference tags original-tags)
                      (seq-difference original-tags tags))
              (apply #'vulpea-buffer-tags-set tags))))))

    (defun vulpea-project-files ()
      "Return a list of note files containing 'project' tag." ;
      (seq-uniq
       (seq-map
        #'car
        (org-roam-db-query
         [:select [nodes:file]
                  :from tags
                  :left-join nodes
                  :on (= tags:node-id nodes:id)
                  :where (like tag (quote "%\"project\"%"))]))))

    (defun vulpea-agenda-files-update (&rest _)
      "Update the value of `org-agenda-files'."
      (setq org-agenda-files (seq-uniq
                              (append
                               (vulpea-project-files)
                               `(,(expand-file-name "todos/gtd.org" my-galaxy))))))

    (add-hook 'find-file-hook #'vulpea-agenda-files-update)

    (advice-add 'org-agenda :before #'vulpea-agenda-files-update)
    (advice-add 'org-todo-list :before #'vulpea-agenda-files-update)

    (add-hook 'find-file-hook #'vulpea-project-update-tag)
    (add-hook 'before-save-hook #'vulpea-project-update-tag))
#+end_src
#+begin_src emacs-lisp
  (defun my/gtd-file ()
    (interactive)
    (find-file (expand-file-name "todos/gtd.org" my-galaxy)))
  (my/space-leader-def
    "fog" '(my/gtd-file :wk "GTD file"))
#+end_src

#+begin_src emacs-lisp
  (use-package org-agenda
    :after org
    :bind ("<f12>" . my/org-agenda)
    :hook (org-agenda-finalize . #'org-agenda-find-same-or-today-or-agenda)
    :init
    (setq org-agenda-files (directory-files-recursively (expand-file-name "todos" my-galaxy) "org$\\|archive$"))
    :config
    (setq org-agenda-dim-blocked-tasks t)
    (setq org-agenda-compact-blocks t)
    (setq org-agenda-window-setup 'other-tab)
    (setq org-agenda-align-tags-to-column -120)
    (setq org-agenda-custom-commands
          '(("R" "Review projects" tags-todo "-CANCELLED/"
             ((org-agenda-overriding-header "Reviews Scheduled")
              (org-agenda-skip-function 'org-review-agenda-skip)
              (org-agenda-cmp-user-defined 'org-review-compare)))
            ("A" "Archive"
             ((todo "DONE|CNCL"
                    ((org-agenda-prefix-format " %i")
                     (org-agenda-hide-tags-regexp "project")
                     (org-agenda-overriding-header "Archive")))))
            (" " "GTD Lists: Daily agenda and tasks"
             ((agenda "" ((org-agenda-span 2)
                          (org-deadline-warning-days 3)
                          (org-agenda-block-separator nil)
                          (org-scheduled-past-days 365)
                          (org-agenda-hide-tags-regexp "project")
                          (org-agenda-day-face-function (lambda (date) 'org-agenda-date))
                          (org-agenda-format-date "%A %-e %B %Y")
                          (org-agenda-prefix-format " %i %?-12t% s")
                          (org-agenda-overriding-header "Today's agenda")))
              (tags-todo "*"
                         ((org-agenda-skip-function
                           `(org-agenda-skip-entry-if 'deadline
                                                      'schedule
                                                      'timestamp
                                                      'notregexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                          (org-agenda-hide-tags-regexp "project")
                          (org-agenda-prefix-format " %i")
                          (org-agenda-overriding-header "Important tasks without a date")))
              (todo "NEXT"
                    ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                     (org-agenda-prefix-format " %i")
                     (org-agenda-block-separator nil)
                     (org-agenda-hide-tags-regexp "project")
                     (org-agenda-overriding-header "Next tasks list")))
              (tags-todo "-Reading/INPROGRESS"
                         ((org-agenda-block-separator nil)
                          (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                          (org-agenda-prefix-format " %i")
                          (org-agenda-hide-tags-regexp "project")
                          (org-agenda-overriding-header "Inprogress tasks list")))
              (tags-todo "-Computer-Emacs-Reading/TODO"
                         ((org-agenda-skip-function
                           `(org-agenda-skip-entry-if 'deadline
                                                      'schedule
                                                      'timestamp
                                                      'regexp ,(format "\\[#%s\\]" (char-to-string org-priority-highest))))
                          (org-agenda-prefix-format " %i")
                          (org-agenda-hide-tags-regexp "project")
                          (org-agenda-block-separator nil)
                          (org-agenda-overriding-header "Todo tasks list")))
              (tags-todo "Emacs|Computer"
                         ((org-agenda-block-separator nil)
                          (org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                          (org-agenda-prefix-format " %i")
                          (org-agenda-hide-tags-regexp "project")
                          (org-agenda-overriding-header "Computer science")))
              (tags-todo "Family"
                         ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                          (org-agenda-prefix-format " %i")
                          (org-agenda-hide-tags-regexp "project")
                          (org-agenda-block-separator nil)
                          (org-agenda-overriding-header "Family")))
              (tags-todo "Reading"
                         ((org-agenda-skip-function '(org-agenda-skip-if nil '(timestamp)))
                          (org-agenda-prefix-format " %i")
                          (org-agenda-hide-tags-regexp "project")
                          (org-agenda-block-separator nil)
                          (org-agenda-overriding-header "Reading Lists")))
              (todo "WAIT|SOMEDAY"
                    ((org-agenda-block-separator nil)
                     (org-agenda-prefix-format " %i")
                     (org-agenda-hide-tags-regexp "project")
                     (org-agenda-overriding-header "Tasks on hold")))))))

    (setq org-agenda-category-icon-alist
          `(("\\`gtd\\'"
             (#(" " 0 1 (rear-nonsticky t display (raise 0.0)
                                         font-lock-face
                                         (:family "FontAwesome" :height 1.0)
                                         face
                                         (:family "FontAwesome" :height 1.0))))
             nil nil :ascent center)
            ("\\\cc\\\|[a-zA-z0-9]*"
             (#(" " 0 1 (rear-nonsticky t display (raise 0.0)
                                         font-lock-face
                                         (:family "FontAwesome" :height 1.0)
                                         face
                                         (:family "FontAwesome" :height 1.0))))
             nil nil :ascent center)))

    (defun my/org-agenda ()
      "Open my `org-agenda'.
  Run `org-roam-db-sync' to get full lists of org agenda files."
      (interactive)
      (if (eq major-mode 'org-agenda-mode)
          (org-agenda-redo-all)
        (org-agenda "" " ")))

    (defun my/org-agenda-query ()
      "Open my `org-agenda' and `m'.
    Run `org-roam-db-sync' to get full lists of org agenda files."
      (interactive)
      (org-roam-db-sync)
      (org-agenda "" "m"))

    (defun my/org-inprogress-tasks ()
      (interactive)
      (org-todo-list "INPROGRESS"))

    (my/space-leader-def
      "o" '(:ignore t :wk "Org")
      "oa" '(:ignore t :wk "Agenda")
      "oaa" '(my/org-agenda :wk "Agenda")
      "oaq" '(my/org-agenda-query :wk "Query")
      "oat" '(org-todo-list :wk "Todo list")
      "oav" '(org-search-view :wk "View search")
      "oai" '(my/org-inprogress-tasks :wk "Inprogess tasks")))
#+end_src

#+begin_src emacs-lisp
  (use-package org-agenda
    :after evil
    :config
    (evil-set-initial-state 'org-agenda-mode 'motion)
    (evil-define-key 'motion org-agenda-mode-map
      (kbd "RET") 'org-agenda-switch-to
      "gj" 'org-agenda-next-item
      "gr" 'org-agenda-redo
      "gR" 'org-agenda-redo-all
      "t" 'org-agenda-todo
      "u" 'org-agenda-undo
      "I" 'org-agenda-clock-in
      "O" 'org-agenda-clock-out
      "cg" 'org-agenda-clock-goto
      "cc" 'org-agenda-clock-cancel
      "cr" 'org-agenda-clockreport-mode))
#+end_src
** calendar and appt
#+begin_src emacs-lisp
  (use-package calendar
    :commands calendar
    :config
    (setq calendar-view-diary-initially-flag t)
    (setq calendar-mark-diary-entries-flag t)
    (setq calendar-mode-line-format nil)

    (setq calendar-date-style 'iso)
    (setq calendar-date-display-form calendar-iso-date-display-form)

    (setq calendar-time-display-form
          '(24-hours ":" minutes
                     (when time-zone
                       (format "(%s)" time-zone))))
    (setq diary-date-forms diary-iso-date-forms)
    :hook (calendar-today-visible . #'calendar-mark-today))

  (my/comma-leader-def
    "c" '(calendar :wk "Calendar"))
#+end_src

#+begin_src emacs-lisp
  (use-package appt
    :after calendar
    :config
    (setq appt-display-diary nil)
    (setq appt-disp-window-function #'appt-disp-window)
    (setq appt-display-mode-line t)
    (setq appt-display-interval 3)
    (setq appt-audible nil)
    (setq appt-warning-time-regexp "appt \\([0-9]+\\)")
    (setq appt-message-warning-time 6)
    (add-hook 'diary-mode-hook #'appt-activate))
#+end_src

Use diary-lib to write diary. 关于这个的使用可以见：[[https://www.youtube.com/watch?v=NkhgIB64zgc][Emacs: Diary and Calendar - YouTube]]
#+begin_src emacs-lisp
  (use-package diary-lib
    :after calendar
    :config
    (add-hook 'diary-list-entries-hook #'diary-sort-entries)
    (add-hook 'diary-mode-hook #'goto-address-mode)
    (setq diary-display-function #'diary-fancy-display)
    (setq diary-header-line-format nil)
    (setq diary-list-include-blanks nil)
    (setq diary-abbreviated-year-flag nil)
    (setq diary-number-of-entries 7)
    (setq diary-comment-start ");;")
    (setq diary-comment-end "")
    (setq diary-nonmarking-symbol "!")

    (setq diary-file (expand-file-name "diary/diary.org" my-galaxy)))
#+end_src

** Zen
Zen Mode 或者叫禅模式，其目的是为了降低不相关因素对于心智的干挠。将自己的视野集中于可见的区域，不需要移动脑袋。

在 Emacs 上有两个相关的包，一个是 ~olivetti~, 另外一个是 ~writeroom-mode~. ~olivetti~ 的功能更单一一些，但是足够使用。
#+begin_src emacs-lisp
  (use-package olivetti
    :commands olivetti-mode)

  (with-eval-after-load 'evil
    (evil-define-key 'nromal 'org-mode-map
      "zw" 'olivetti-mode))
#+end_src
** TOC
在 Org 文件的顶部生成目录。[[https://github.com/snosov1/toc-org][snosov1/toc-org: toc-org is an Emacs utility to have an up-to-date table of contents in the org files without exporting (useful primarily for readme files on GitHub)]]

需要在文件的头部新建一个 heading 并加上 tag：toc.
#+begin_src emacs-lisp
  (use-package toc-org
    :hook (org-mode . toc-org-mode))
#+end_src

** org-super-star
[[https://github.com/integral-dw/org-superstar-mode][integral-dw/org-superstar-mode: Make org-mode stars a little more super]]

#+begin_src emacs-lisp
  (use-package org-superstar
    :hook (org-mode . org-superstar-mode)
    :config
    (setq org-superstar-headline-bullets-list '("❶" "❷" "❸" "❹" "❺" "❻" "❼"))
    ;; (setq org-superstar-headline-bullets-list '("1" "2" "3" "4" "5" "6" "7"))
    ;; (setq org-superstar-headline-bullets-list '("①" "②" "③" "④" "⑤" "⑥"))
    (setq org-hide-leading-stars t))
#+end_src
** org-download
用于管理图片。
#+begin_src emacs-lisp
  (use-package org-download
    :commands org-download-enable
    :hook (org-mode . org-download-enable)
    :config
    (setq org-download-image-dir (expand-file-name "pictures" my-galaxy))
    (setq org-download-screenshot-method 'screencapture)
    (setq org-download-abbreviate-filename-function 'expand-file-name)
    (setq org-download-timestamp "%Y%m%d%H%M%S")
    (setq org-download-display-inline-images nil)
    (setq org-download-heading-lvl nil)
    (setq org-download-annotate-function (lambda (_link) ""))
    (setq org-download-image-attr-list '("#+NAME: fig: "
                                         "#+CAPTION: "
                                         "#+ATTR_ORG: :width 500px"
                                         "#+ATTR_LATEX: :width 10cm :placement [!htpb]"
                                         "#+ATTR_HTML: :width 600px")))
  (my/space-leader-def
    "od" '(:ignore t :wk "Download")
    "odc" '(org-download-clipboard :wk "Download Clipboard")
    "ody" '(org-download-yank :wk "Download Yank")
    "odr" '(org-download-rename-last-file :wk "Rename last file")
    "odR" '(org-download-rename-at-point :wk "Rename point"))
#+end_src

** org-appear
在 org 中经常使用链接，使 Org 元素的不可见部分显示为可见。结合 Evil 使用，对于链接的编辑很方便。
#+begin_src emacs-lisp
  (use-package org-appear
    :config
    (setq org-appear-autolinks t)
    (setq org-appear-trigger 'manual)
    :hook ((org-mode . (lambda ()
                         (add-hook 'evil-insert-state-entry-hook
                                   #'org-appear-manual-start
                                   nil
                                   t)
                         (add-hook 'evil-insert-state-exit-hook
                                   #'org-appear-manual-stop
                                   nil
                                   t)))
           (org-mode . org-appear-mode)))
#+end_src

** math-preview
#+begin_src emacs-lisp
  (use-package math-preview
    :commands (math-preview-all math-preview-at-point)
    :config
    (setq math-preview-scale 1.1)
    (setq math-preview-raise 0.3)
    (setq math-preview-margin '(1 . 0)))

  (my/space-leader-def
    "mpa" '(math-preview-all :wk "All")
    "mpA" '(math-preview-clear-all :wk "Clear All")
    "mpp" '(math-preview-at-point :wk "Point")
    "mpP" '(math-preview-clear-at-point :wk "Clear Point")
    "mpr" '(math-preview-region :wk "Region")
    "mpR" '(math-preview-clear-region :wk "Clear Region"))
#+end_src

** plantuml
#+begin_src emacs-lisp
  (use-package plantuml
    :commands (plantuml-org-to-mindmap-open plantuml-org-to-wbs-open)
    :hook (org-mode . (lambda ()
                        (require 'plantuml)))
    :config
    (setq plantuml-jar-path
          (concat (string-trim
                   (shell-command-to-string "readlink -f $(brew --prefix plantuml)"))
                  "/libexec/plantuml.jar")))
  (my/space-leader-def
    "op" '(:ignore t :wk "Plantuml")
    "opm" '(plantuml-org-to-mindmap-open :wk "Mindmap")
    "ops" '(plantuml-org-to-wbs-open :wk "Work Breakdown Structure"))
#+end_src

** org-rainbow-tags
#+begin_src emacs-lisp
  (use-package org-rainbow-tags
    :hook (org-mode . org-rainbow-tags-mode))
#+end_src

** alarm-clock
如其名，在 Emacs 中设置闹钟的。
#+begin_src emacs-lisp
  (use-package alarm-clock
    :commands (alarm-clock-set alarm-clock-list-view)
    :config
    (setq alarm-clock-cache-file (expand-file-name "var/.alarm-clock.cache" user-emacs-directory)))
#+end_src

** COMMENT alert
#+begin_src emacs-lisp
  (use-package alert
    :defer t
    :config
    (setq alert-default-style 'osx-notifier))
#+end_src
** COMMENT org-alert
#+begin_src emacs-lisp
  (use-package org-alert
    :hook (after-init . org-alert-enable)
    :config
    (setq org-alert-interval 300)
    (setq org-alert-notify-cutoff 10)
    (setq org-alert-notify-after-event-cutoff 10)
    (setq org-alert-notification-title "Org Agenda Reminder!"))
#+end_src

** pomm
Emacs 中执行 Pomodoro 哲学。
#+begin_src emacs-lisp
  (use-package pomm
    :commands pomm
    :config
    (setq pomm-state-file-location (expand-file-name "pomm" no-littering-var-directory))
    (pomm-mode-line-mode 1))
#+end_src

** Pandoc
将 org 文档转换为 word 文档，仅支持简单的文档，过于复杂的文档不行。
#+begin_src emacs-lisp
  (defun org-export-docx ()
    "Convert org to docx."
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
          (template-file (expand-file-name "template/template.docx" user-emacs-directory)))
      (shell-command (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file))
      (message "Convert finish: %s" docx-file)))
#+end_src

ox-pandoc 增加 org-export 的选项。不过 ox-pandoc 己经不怎么更新。

此外还有一个 pandoc-mode, 初步尝试后感觉还可以。.

Pandoc 不怎么使用，时间长了就忘记 pandoc 的使用方法。
#+begin_src emacs-lisp :tangle no
  ;; First, install pandoc with `brew install pandoc'.
  ;; Only for simple file, no cite info, no latex formular.
  ;; Image file has to be absolute path, relative path do not work!
  (setq org-pandoc-menu-entry
        '((?m "as md." org-pandoc-export-as-commonmark)
          (?M "to md and open." org-pandoc-export-to-commonmark-and-open)
          (?x "to docx." org-pandoc-export-to-docx)
          (?X "to docx and open." org-pandoc-export-to-docx-and-open)
          (?e "to epub." org-pandoc-export-to-epub)
          (?E "to epub and open." org-pandoc-export-to-epub-and-open)
          (?3 "to epub3." org-pandoc-export-to-epub3)
          (?£ "to epub3 and open." org-pandoc-export-to-epub3-and-open)
          (?j "as json." org-pandoc-export-as-json)
          (?J "to json and open." org-pandoc-export-to-json-and-open)
          (?r "as rst." org-pandoc-export-as-rst)
          (?R "to rst and open." org-pandoc-export-to-rst-and-open)))
  (setq org-pandoc-options '((standalone . t)
                             (mathjax . t)
                             (wrap . "preserve")))
#+end_src

** beancount-mode
Beancount has more plugin than ledger-cli.
#+begin_src emacs-lisp
  (use-package beancount
    :mode (".bean" . beancount-mode)
    :hook ((beancount-mode . (lambda ()
                               (setq-local electric-indent-chars nil)))
           (beancount-mode . outline-minor-mode))
    :config
    (evil-define-key 'normal 'beancount-mode-map
      "zf" 'beancount-fava)

    ;; insert whole transaction instead of only insert date.
    (defun my/beancount-insert-transaction (&optional days)
      "Start a new timestamped directive with date shifted by DAYS from today."
      (interactive "P")
      (unless (bolp) (newline))
      (insert (beancount--shift-current-date days) " * \"\" \"\"")
      (evil-backward-char 3)
      (evil-insert 0))

    (advice-add 'beancount-insert-date :override 'my/beancount-insert-transaction)

    ;; Auto open browser after beancount-fava started.
    (defun my/browser-beancount-fava ()
      (if beancount--fava-process
          (browse-url "http://127.0.0.1:5000")))

    (advice-add 'beancount-fava :after 'my/browser-beancount-fava)

    ;; auto align transaction before save file.
    (defun my/beancount-align-transaction ()
      "Align visible region in current buffer."
      (save-excursion
        (indent-region (window-start) (window-end))))

    (add-hook 'before-save-hook (lambda ()
                                  (if (eq major-mode 'beancount-mode)
                                      (my/beancount-align-transaction))))

    ;; If cursor in "", activate input method rime.
    (defun my/beancount-activate-input-method ()
      (when (eq major-mode 'beancount-mode)
        (if (not (bounds-of-thing-at-point 'whitespace))
            (if (bounds-of-thing-at-point 'string)
                (activate-input-method "rime")))))

    (add-hook 'evil-insert-state-entry-hook #'my/beancount-activate-input-method))





#+end_src
** Bibtex management
文献管理涉及到的内容比较多，文献的查找、管理、阅读与引用等等。

Emacs 进行文献管理需要用到的包有 org-cite,bibtex-completion,citar
*** org-cite
Org-cite 目前是 org 内置的进行文献引用的包。

关于 org-cite 的使用见：https://blog.tecosaur.com/tmio/2021-07-31-citations.html 或 [[https://kristofferbalintona.me/posts/202206141852/][Citations in org-mode: Org-cite and Citar | Kristoffer Balintona]].

己经说的比较详细。
#+begin_src emacs-lisp
  (use-package oc
    :after org
    :config
    (setq org-cite-global-bibliography `(,(concat my-galaxy "/bibtexs/References.bib"))))
#+end_src

*** citar
为什么使用 citar? 是因为 org-cite 的提示界面看起来不咋地，而 citar 提供的界面就很友好。

我通常使用 ~citar-open-files~ / ~SPC n r p~ 来打开想要阅读的文献 PDF 文件。

阅读文献使用的是 [[pdf-tools]] ，更好用的是 [[https://github.com/emacs-eaf/eaf-pdf-viewer][emacs-eaf/eaf-pdf-viewer: Fastest PDF Viewer in Emacs]].

eaf-pdf-viewer 存在的问题还是安装较难，对于系统环境要求较高，如 Emacs 29 上就不能使用，存在问题。
#+begin_src emacs-lisp
  (use-package citar
    :commands citar-open citar-open-entry citar-open-files citar-open-notes citar-open-links
    :config
    (setq citar-bibliography org-cite-global-bibliography)
    (setq citar-notes-paths `(,(expand-file-name "roam/ref" my-galaxy)))
    (setq citar-library-file-extensions '("pdf" "jpg" "epub"))
    (setq citar-templates '((main . "${author editor:30} ${date year issued:4} ${title:48}")
                            (suffix . "${=key= id:15} ${=type=:12} ${tags keywords:*}")
                            (preview . "${author editor} (${year issued date}) ${title}, ${journal journaltitle publisher container-title collection-title}.\n")
                            (note . "${title}")))
    (setq citar-symbol-separator "  ")
    (setq citar-file-additional-files-separator "-")
    (setq citar-at-point-function 'embark-act))

  (use-package citar
    :after all-the-icons
    :config
    (setq citar-symbols
          `((file ,(all-the-icons-faicon "file-pdf-o" :face 'all-the-icons-dred :v-adjust -0.1) . " ")
            (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
            (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " "))))

  (use-package citar-capf
    :hook ((LaTeX-mode . citar-capf-setup)
           (org-mode . citar-capf-setup)))

  (use-package citar-org
    :config
    (setq org-cite-insert-processor 'citar)
    (setq org-cite-follow-processor 'citar)
    (setq org-cite-activate-processor 'citar)

    (with-eval-after-load 'citar-org
      (define-key citar-org-citation-map (kbd "RET") 'org-open-at-point)))

  (use-package citar-embark
    :commands citar-embark-mode
    :hook (org-mode . citar-embark-mode))

  (my/space-leader-def
    "re" '(citar-open-entry :wk "Open entry")
    "rp" '(citar-open-files :wk "Open files")
    "ri" '(citar-insert-citation :wk "Insert citation")
    "rn" '(citar-open-notes :wk "Open/Create note")
    "rl" '(citar-open-links :wk "Open links"))
#+end_src

*** citar-org-roam
这个包将 citar 和 org-roam 相结合，我主要使用它来创建文献笔记内容。

目前 citar-org-roam 不支持 capture with template, 我改写了 citar-org-roam--create-capture-note 函数。
#+begin_src emacs-lisp
  (use-package citar-org-roam
    :commands (citar-org-roam-mode citar-org-roam-cited)
    :hook (org-roam-mode . citar-org-roam-mode)
    :config
    (setq citar-org-roam-subdir "ref")
    (setq citar-org-roam-note-title-template "${title}")

    ;; Temporarily work, wait citar-org-roam update to support capture with template.
    (defun my/citar-org-roam--create-capture-note (citekey entry)
      "Open or create org-roam node for CITEKEY and ENTRY."
      ;; adapted from https://jethrokuan.github.io/org-roam-guide/#orgc48eb0d
      (let ((title (citar-format--entry
                    citar-org-roam-note-title-template entry)))
        (org-roam-capture-
         :templates
         '(("r" "reference" plain (file "~/.emacs.d/template/reference") :if-new ;; Change "%?" to a template file.
            (file+head
             "%(concat
                    (when citar-org-roam-subdir (concat citar-org-roam-subdir \"/\")) \"${citekey}.org\")"
             "#+title: ${title}\n")
            :immediate-finish t
            :unnarrowed t))
         :info (list :citekey citekey)
         :node (org-roam-node-create :title title)
         :props '(:finalize find-file))
        (org-roam-ref-add (concat "@" citekey))))
    (advice-add 'citar-org-roam--create-capture-note :override #'my/citar-org-roam--create-capture-note))

  (my/space-leader-def
    "rc" '(citar-org-roam-cited :wk "Cited Roam Node"))
#+end_src
*** bibtex-completion
bibtex-completion 这个包是 org-roam-bibtex 的依赖。
#+begin_src emacs-lisp
  (use-package bibtex-completion
    :after org-roam-bibtex
    :config
    (setq bibtex-completion-bibliography org-cite-global-bibliography)
    (setq bibtex-completion-notes-path (expand-file-name "roam/ref" my-galaxy))
    (setq bibtex-completion-pdf-field "File")
    (setq bibtex-completion-additional-search-fields '(keywords journal booktitle))
    (setq bibtex-completion-pdf-symbol "P")
    (setq bibtex-completion-notes-symbol "N")
    (setq bibtex-completion-display-formats '((article . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
                                              (inbook . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
                                              (incollection . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
                                              (inproceedings . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
                                              (t . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}"))))
#+end_src
*** org-roam-bibtex
org-roam-bibtex 的主要作用是当创建文献笔记时，会在文件的头部创建一个 ~ROAM_REFS: @xxx~ ，这样通过 @xxx 可以打开对应文献的 PDF 文件。

我设置了 ~z m~ 调用 ~orb-note-actions~. 主要作用有两个，一个是打开对应文献笔记的 PDF 文件，一个是通过 scrapper 来获取 PDF 文件的引文信息。

使用 scrapper 功能需要安装 [[https://github.com/inukshuk/anystyle][inukshuk/anystyle: Fast and smart citation reference parsing]], ~[sudo] gem install anystyle-cli~.

这样文献检索就有了另外一个方法，就是通过己有的文献来查找文献，这也是阅读文献的一个重要方法。别人引用了啥，捡重要的看哈。
#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :commands orb-note-actions)

  (with-eval-after-load 'evil
    (evil-define-key 'normal 'org-mode-map
      "zm" 'orb-note-actions))
#+end_src
*** ebib
Ebib 是 Emacs 中的文献管理软件，类似于 zotero, 但是我感觉 Zotero 更强一些，但是 Zotero 占用的内存实在是大，MacOS 上约有一个G.

相比较而言，Emacs 整个占用的内存才几百兆。

我保留 Ebib 的原因是它可以从主 bibtex 文件中提取文章需要的文献内容。

具体的使用见：[[https://joostkremers.github.io/ebib/ebib-manual.html#main-and-dependent-databases][Ebib Manual]]

首先创建一个 dependent database ~M c~, 然后使用 ~M a~ 把 main database 中的引文添加到 dependent database 中。
#+begin_src emacs-lisp
  (use-package ebib
    :bind ("<f2>" . ebib)
    :config
    (setq ebib-preload-bib-files org-cite-global-bibliography)

    (setq ebib-keywords (concat org-roam-directory "/bibtexs/keywords.txt"))
    (setq ebib-notes-directory (concat org-roam-directory "/ref"))
    (setq ebib-filters-default-file (concat org-roam-directory "/bibtexs/ebib-filters"))
    (setq ebib-reading-list-file (concat org-roam-directory "/bibtexs/reading_list.org"))

    (setq ebib-keywords-field-keep-sorted t)
    (setq ebib-keywords-file-save-on-exit 'always)

    (setq ebib-index-columns
          '(("Entry Key" 30 t) ("Note" 1 nil) ("Year" 6 t) ("Title" 50 t)))
    (setq ebib-file-associations '(("ps" . "gv"))))
#+end_src
*** COMMENT persid
[[https://github.com/rougier/persid/tree/master/][rougier/persid: Persistent identifier library for GNU Emacs]] 具有和 biblio 相似的功能。当己知 ISBN 或 DOI 的时候可以用于获取 bibtex 引文。

*** scihub
当有了 DOI 之后想要下载文献，可以使用 scihub 这个通过 scihub 下载。若没有源的话再想其他的方式。

使用 scihub 需要提供 DOI 或者完整的文献题目。
#+begin_src emacs-lisp
  (use-package scihub
    :commands scihub
    :config
    (setq scihub-download-directory "~/Downloads/")
    (setq scihub-open-after-download t)
    (setq scihub-fetch-domain 'scihub-fetch-domains-lovescihub))
#+end_src

*** biblio
文献的查找目前有多种方式，如可以使用 biblio 进行查找，常用的有 crossfer-lookup.

我默认使用 crossref 作为后端，通过 ~SPC n r d~ 调用，若要使用其他的后端，通过 ~M-x biblio-lookup~ 进行。
#+begin_src emacs-lisp
  (use-package biblio
    :commands biblio-lookup
    :general
    (:states 'normal
             "SPC rd" 'my/biblio-lookup-crossref :no-autoload t)
    :preface
    (defun my/biblio-lookup-crossref ()
      (interactive)
      (biblio-lookup 'biblio-crossref-backend)))

  (my/space-leader-def
    "rd" '(my/biblio-lookup-crossref :wk "Get bib from crossfer"))
#+end_src
** latex
参考资料：[[https://gist.github.com/karthink/7d89df35ee9b7ac0c93d0177b862dadb][fast latex input]].

Latex 可以结合 eglot 使用，有多个 server 可以使用， =digestif= 和 =texlab=，我使用前者。
*** Auctex
Auctex 若通过源文件安装，需要先将其克隆到本地，然后执行：
#+begin_src shell
  ./autogen.sh
  ./configure
  make
  sudo make install
#+end_src
emacs 上有 =latex-mode= 和 =LaTeX-mode= 两个，使用哪个取决于是否安装了 =auctex= 这个包。若有，使用 =LaTex-mode= 就好。
#+begin_src emacs-lisp
  (use-package tex
    :mode (".tex" . LaTeX-mode)
    :init
    (load "auctex.el" nil t t)
    (load "preview-latex.el" nil t t)
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query nil)
    (setq TeX-electric-sub-and-superscript t)
    (setq TeX-auto-local ".auctex-auto")
    (setq TeX-style-local ".auctex-style")
    (setq TeX-source-correlate-mode t)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server nil)

    (setq-default TeX-master t)
    (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
    (add-to-list 'TeX-view-program-selection '(output-pdf "PDF Tools"))
    (add-to-list 'TeX-view-program-list '("PDF Tools" TeX-pdf-tools-sync-view))
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))

  (use-package latex
    :bind (:map LaTeX-mode-map
                ("C-c h" . TeX-doc)))
#+end_src
*** fontification
[[https://tex.stackexchange.com/questions/85849/auctex-new-commands-recognized-as-such/86119#86119][macros - AUCTeX – new commands recognized as such - TeX - LaTeX Stack Exchange]].
#+begin_src emacs-lisp
  (use-package font-latex
    :after tex
    :config
    (setq font-latex-match-reference-keywords
          '(;; BibLaTeX.
            ("printbibliography" "[{")
            ("addbibresource" "[{")
            ;; Standard commands.
            ("cite" "[{")
            ("citep" "[{")
            ("citet" "[{")
            ("Cite" "[{")
            ("parencite" "[{")
            ("Parencite" "[{")
            ("footcite" "[{")
            ("footcitetext" "[{")
            ;; Style-specific commands.
            ("textcite" "[{")
            ("Textcite" "[{")
            ("smartcite" "[{")
            ("Smartcite" "[{")
            ("cite*" "[{")
            ("parencite*" "[{")
            ("supercite" "[{")
            ;; Qualified citation lists.
            ("cites" "[{")
            ("Cites" "[{")
            ("parencites" "[{")
            ("Parencites" "[{")
            ("footcites" "[{")
            ("footcitetexts" "[{")
            ("smartcites" "[{")
            ("Smartcites" "[{")
            ("textcites" "[{")
            ("Textcites" "[{")
            ("supercites" "[{")
            ;; Style-independent commands.
            ("autocite" "[{")
            ("Autocite" "[{")
            ("autocite*" "[{")
            ("Autocite*" "[{")
            ("autocites" "[{")
            ("Autocites" "[{")
            ;; Text commands.
            ("citeauthor" "[{")
            ("Citeauthor" "[{")
            ("citetitle" "[{")
            ("citetitle*" "[{")
            ("citeyear" "[{")
            ("citedate" "[{")
            ("citeurl" "[{")
            ;; Special commands.
            ("fullcite" "[{")
            ;; Cleveref.
            ("cref" "{")
            ("Cref" "{")
            ("cpageref" "{")
            ("Cpageref" "{")
            ("cpagerefrange" "{")
            ("Cpagerefrange" "{")
            ("crefrange" "{")
            ("Crefrange" "{")
            ("labelcref" "{")))

    (setq font-latex-match-textual-keywords
          '(;; BibLaTeX brackets.
            ("parentext" "{")
            ("brackettext" "{")
            ("hybridblockquote" "[{")
            ;; Auxiliary commands.
            ("textelp" "{")
            ("textelp*" "{")
            ("textins" "{")
            ("textins*" "{")
            ;; Subcaption.
            ("subcaption" "[{")))

    (setq font-latex-match-variable-keywords
          '(;; Amsmath.
            ("numberwithin" "{")
            ;; Enumitem.
            ("setlist" "[{")
            ("setlist*" "[{")
            ("newlist" "{")
            ("renewlist" "{")
            ("setlistdepth" "{")
            ("restartlist" "{")
            ("crefname" "{"))))
#+end_src
*** COMMENT evil-tex
#+begin_src emacs-lisp
  (add-hook 'LaTeX-mode-hook #'evil-tex-mode)
#+end_src
*** COMMENT latex-preview-pane
#+begin_src emacs-lisp
  (setq latex-preview-pane-multifile-mode 'auctex)

  (add-hook 'LaTeX-mode-hook 'latex-preview-pane-enable)
#+end_src
*** cdlatex
#+begin_src emacs-lisp
  (use-package cdlatex
    :hook ((LaTeX-mode . turn-on-cdlatex)
           (org-mode . org-cdlatex-mode)))
#+end_src

*** Reftex
#+begin_src emacs-lisp
  (use-package reftex
    :hook ((LaTeX-mode . turn-on-reftex)
           (reftex-toc-mode . menu-bar--visual-line-mode-enable))
    :config
    (setq reftex-toc-split-windows-horizontally t)
    (setq reftex-toc-split-windows-fraction 0.25))

  (add-to-list 'display-buffer-alist '("\\*toc\\*"
                                       (display-buffer-reuse-window)
                                       (side . left)
                                       (window-parameters
                                        (mode-line-format . none)
                                        (delete-other-windows . t))))
#+end_src
*** ox-latex
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-highlight-latex-and-related '(latex script)))

  (use-package ox-latex
    :defer 3
    :config
    (setq org-latex-src-block-backend 'minted)
    (setq org-latex-minted-options '(("breaklines" "true")
                                     ("breakanywhere" "true")))

    (setq org-latex-classes nil)
    (add-to-list 'org-latex-classes
                 '("book"
                   "\\documentclass[UTF8,twoside,a4paper,12pt,openright]{ctexrep}
                     [NO-DEFAULT-PACKAGES]
                     [NO-PACKAGES]
                     [EXTRA]"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("article-cn" "\\documentclass{ctexart}
                                        [NO-DEFAULT-PACKAGES]
                                        [NO-PACKAGES]
                                        [EXTRA]"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes '("article" "\\documentclass[11pt]{article}
                                        [NO-DEFAULT-PACKAGES]
                                        [NO-PACKAGES]
                                        [EXTRA]"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    (add-to-list 'org-latex-classes '("beamer" "\\documentclass[presentation]{beamer}
                                        [DEFAULT-PACKAGES]
                                        [PACKAGES]
                                        [EXTRA]"
                                      ("\\section{%s}" . "\\section*{%s}")
                                      ("\\subsection{%s}" . "\\subsection*{%s}")
                                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    (setq org-latex-pdf-process
          '("xelatex -8bit --shell-escape  -interaction=nonstopmode -output-directory %o %f"
            "bibtex -shell-escape %b"
            "xelatex -8bit --shell-escape  -interaction=nonstopmode -output-directory %o %f"
            "xelatex -8bit --shell-escape  -interaction=nonstopmode -output-directory %o %f"
            "rm -fr %b.out %b.log %b.tex %b.brf %b.bbl"))

    (setq org-latex-logfiles-extensions '("lof" "lot" "tex~" "aux" "idx" "log"
                                          "out" "toc" "nav" "snm" "vrb" "dvi"
                                          "fdb_latexmk" "blg" "brf" "fls"
                                          "entoc" "ps" "spl" "bbl"))

    (setq org-latex-prefer-user-labels t))
#+end_src
*** COMMENT Math symbol
#+begin_src emacs-lisp :tangle no
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (setq-local company-backends
                          (append '((company-math-symbols-latex company-latex-commands))
                                  company-backends))))
  (add-hook 'org-mode-hook
            (lambda ()
              (setq-local company-backends
                          (append '((company-math-symbols-latex company-latex-commands))
                                  company-backends))))
#+end_src
*** COMMENT company-math
#+begin_src emacs-lisp :tangle no
  ;; global activation of the unicode symbol completion
  ;; company-math
  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-math-symbols-unicode))
#+end_src
*** COMMENT company-auctex
#+begin_src emacs-lisp :tangle no
  (add-hook 'company-mode-hook 'company-auctex-init)

  (defun company-bibtex-completion-candidates ()
    (let ((bibtex-completion-bibliography
           (or (bibtex-completion-find-local-bibliography)
               bibtex-completion-bibliography)))
      (mapcar (lambda (x) (propertize (cdr (assoc "=key=" (cdr x)))
                                      'bibtex-completion-annotation
                                      (cdr (assoc "title" (cdr x)))))
              (bibtex-completion-candidates))))

  (defun company-bibtex-completion (command &optional arg &rest ignored)
    "bibtex-completion backend."
    (interactive (list 'interactive))
    (cl-case command
      (interactive (company-begin-backend 'company-bibtex-completion))
      (prefix (let ((prefixes
                     (cond ((derived-mode-p 'latex-mode)
                            (company-auctex-prefix "\\\\cite[^[{]*\\(?:\\[[^]]*\\]\\)?{\\([^}]*\\)\\="))
                           ((and (derived-mode-p 'org-mode)
                                 (not (org-in-src-block-p))
                                 (looking-back "cite:\\([^}]*\\)"))
                            (match-string-no-properties 1))
                           (t nil))))
                (if prefixes
                    (last (split-string prefixes "," t))
                  nil)))
      (candidates (all-completions arg (company-bibtex-completion-candidates)))
      (annotation (get-text-property 0 'bibtex-completion-annotation arg))))

  (add-to-list 'company-backends #'company-bibtex-completion)
#+end_src
*** auctex-latexmk
[[https://github.com/tom-tan/auctex-latexmk][tom-tan/auctex-latexmk: This library adds LatexMk support to AUCTeX.]]
最新的 auctex 不能使用此处的包文件，需要使用 [[https://github.com/emacsmirror/auctex-latexmk][emacsmirror/auctex-latexmk: Add LatexMk support to AUCTeX]] 替代。
#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :hook (LaTeX-mode . auctex-latexmk-setup))
#+end_src
*** ox-beamer
#+begin_src emacs-lisp
  (use-package ox-beamer
    :defer 3
    :after org)
#+end_src
*** COMMENT org-elp
https://emacs-china.org/t/retina-osx-ei-10-11-3-emacs-org-mode-latex-preview/77/7
#+begin_src emacs-lisp
    (setq org-format-latex-options '(:foreground default
                                                 :background default
                                                 :scale 4.0
                                                 :html-foreground "Black"
                                                 :html-background "Transparent"
                                                 :html-scale 1.0
                                                 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
    (setq org-latex-create-formula-image-program 'dvisvgm)
#+end_src
** Blog
使用 org-mode 写 blog 有两个方法，一个是使用 ox-hugo, 另外一个就是使用 org-publish.

这两个都可以基于 github 建立自己的博客。

使用 deft 管理自己的写作，原先想使用 denote 进行，但是 denote 创建的文件名过长，会导致 [[https://codeberg.org/ideasman42/emacs-undo-fu-session][undo-fu-session]] 报 ~file name too long~ 的错误。

发现使用 [[consult-notes]] 比 deft 好用。Deft 默认创建的文件名是一串日期格式，没有直接使用 title 直观。虽然可以使用 deft 提供的界面查找文件，但是不能结合 vertico 直接使用拼音进行中文的检索。
*** ox-hugo
#+begin_src emacs-lisp
  (use-package ox-hugo
    :defer 3
    :after ox)
#+end_src
*** ox-html
#+begin_src emacs-lisp
  (use-package ox-html
    :after ox
    :config
    (setq org-html-preamble t)
    (setq org-html-preamble-format
          '(("en" "<a href=\"/index.html\" class=\"button\">Home</a>
                 <a href=\"/notes/index.html\" class=\"button\">Notes</a>
                 <a href=\"/engineering/index.html\" class=\"button\">Engineering</a>
                 <a href=\"/movies/index.html\" class=\"button\">Movies</a>
                 <a href=\"/books/index.html\" class=\"button\">Books</a>
                 <a href=\"/about.html\" class=\"button\">About</a>
                 <hr>")))

    (setq org-html-postamble t)

    (setq org-html-postamble-format
          '(("en" "<hr><div class=\"generated\">Created with %c on MacOS</div>")))

    (setq org-html-head-include-default-style nil)

    (setq org-html-head
          "<link rel=\"stylesheet\" type=\"text/css\" href=\"../css/style.css\" />"))
#+end_src
*** ox-publish
#+begin_src emacs-lisp
  (use-package ox-publish
    :after ox
    :config
    (defvar my/publish-directory "~/shuyi.github.io")

    (setq org-publish-project-alist
          `(("site"
             :base-directory ,website-directory
             :base-extension "org"
             :recursive nil
             :publishing-directory ,my/publish-directory
             :publishing-function org-html-publish-to-html)

            ("notes"
             :base-directory ,(expand-file-name "notes" website-directory)
             :base-extension "org"
             :publishing-directory ,(expand-file-name "notes" my/publish-directory)
             :publishing-function org-html-publish-to-html
             :auto-sitemap t
             :sitemap-filename "index.org"
             :sitemap-title "Notes"
             :sitemap-sort-files anti-chronologically)
            ("books"
             :base-directory ,(expand-file-name "books" website-directory)
             :base-extension "org"
             :publishing-directory ,(expand-file-name "books" my/publish-directory)
             :publishing-function org-html-publish-to-html
             :auto-sitemap t
             :sitemap-filename "index.org"
             :sitemap-title "Books"
             :sitemap-sort-files anti-chronologically)
            ("movies"
             :base-directory ,(expand-file-name "movies" website-directory)
             :base-extension "org"
             :publishing-directory ,(expand-file-name "movies" my/publish-directory)
             :publishing-function org-html-publish-to-html
             :auto-sitemap t
             :sitemap-filename "index.org"
             :sitemap-title "Movies"
             :sitemap-sort-files anti-chronologically)
            ("engineering"
             :base-directory ,(expand-file-name "engineering" website-directory)
             :base-extension "org"
             :publishing-directory ,(expand-file-name "engineering" my/publish-directory)
             :publishing-function org-html-publish-to-html
             :auto-sitemap t
             :sitemap-filename "index.org"
             :sitemap-title "Engineering"
             :sitemap-sort-files anti-chronologically)
            ("static"
             :base-directory ,website-directory
             :base-extension "css\\|txt\\|jpg\\|gif\\|png"
             :recursive t
             :publishing-directory  ,my/publish-directory
             :publishing-function org-publish-attachment)

            ("personal-website" :components ("site" "notes" "books"
                                             "movies" "engineering" "static")))))
#+end_src
** COMMENT org-present
[[https://xenodium.com/emacs-org-present-in-style/][Emacs: org-present in style]]
* Applications
** Browser
#+begin_src emacs-lisp
  ;; eww
  ;; Install readability first.
  ;; npm install -g readability-cli
  ;; (setq eww-retrieve-command '("readable"))

  ;; Another choice `websearch'.
  ;; Search engine
  (use-package engine-mode
    :hook (on-first-input . engine-mode)
    :config
    (defengine google "https://google.com/search?q=%s"
               :keybinding "g"
               :docstring "Search Google.")
    (defengine wikipedia "https://en.wikipedia.org/wiki/Special:Search?search=%s"
               :keybinding "w"
               :docstring "Search Wikipedia.")
    (defengine github "https://github.com/search?ref=simplesearch&q=%s"
               :keybinding "h"
               :docstring "Search GitHub.")
    (defengine youtube "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
               :keybinding "y"
               :docstring "Search YouTube.")
    (defengine moviedouban "https://search.douban.com/movie/subject_search?search_text=%s"
               :keybinding "m"
               :docstring "Search Moive DouBan.")
    (defengine bookdouban "https://search.douban.com/book/subject_search?search_text=%s"
               :keybinding "b"
               :docstring "Search Book DouBan.")
    (defengine zhihu "https://www.zhihu.com/search?type=content&q=%s"
               :keybinding "z"
               :docstring "Search Zhihu."))

  (my/comma-leader-def
    "s" '(:ignore t :wk "Search")
    "sb" '(engine/search-bookdouban :wk "Book DouBan")
    "ss" '(engine/search-google :wk "Google")
    "sg" '(engine/search-github :wk "Github")
    "sy" '(engine/search-youtube :wk "Youtube")
    "sw" '(engine/search-wikipedia :wk "Wikipedia")
    "sm" '(engine/search-moviedouban :wk "Movie DouBan")
    "sz" '(engine/search-zhihu :wk "Zhihu")
    "sr" '(rg :wk "rg")
    "sl" '(consult-git-log-grep :wk "Git Log Grep"))
#+end_src

[[https://github.com/xuchunyang/grab-mac-link.el][xuchunyang/grab-mac-link.el: Grab link from Mac Apps and insert it into Emacs]]. 很方便的在文件中增加当前浏览网页的链接，我使用 MacOS, 常用的是 Safari 浏览器。

#+begin_src emacs-lisp
  (use-package grab-mac-link
    :commands grab-mac-link-dwim
    :preface
    (defun my/link-grab ()
      (interactive)
      (grab-mac-link-dwim 'safari))
    :bind ("<f8>" . my/link-grab))
#+end_src
** Elfeed
[[https://github.com/skeeto/elfeed][https://github.com/skeeto/elfeed]]
#+begin_src emacs-lisp
  (use-package elfeed
    :bind ("C-c , r" . elfeed)
    :preface
    (defun elfeed-display-buffer (buf &optional act)
      (pop-to-buffer buf '((display-buffer-reuse-window display-buffer-in-side-window)
                           (side . bottom)
                           (window-height . 0.8)
                           (reusable-frames . visible)
                           (window-parameters
                            (select . t)
                            (quit . t)
                            (popup . t)))))
    :config
    (setq elfeed-show-entry-switch #'elfeed-display-buffer))

  (my/comma-leader-def
    "r" '(elfeed-summary :wk "Elfeed"))

  (add-to-list 'display-buffer-alist
               `(,(rx (| "*elfeed-search*"
                         "*elfeed-summary*"
                         "*elfeed-entry-"))
                 (display-buffer-in-tab)
                 (tab-name . "RSS")
                 (tab-group . "RSS")
                 (window-parameters . ((mode-line-format . none)))))

#+end_src
*** elfeed-org
[[https://github.com/remyhonig/elfeed-org][remyhonig/elfeed-org: Configure the Elfeed RSS reader with an Orgmode file]] 通过 org 集中管理 elfeed 源。
#+begin_src emacs-lisp
  (use-package elfeed-org
    :after elfeed
    :init
    (setq rmh-elfeed-org-files `(,(concat my-galaxy "/rss/elfeed.org"))))

  (defun my/rss-source ()
    "Open elfeed config file."
    (interactive)
    (find-file (car rmh-elfeed-org-files)))

  (my/space-leader-def
    "foe" '(my/rss-source :wk "Elfeed file"))
#+end_src
*** elfeed-summary
[[https://github.com/SqrtMinusOne/elfeed-summary][SqrtMinusOne/elfeed-summary: Feed summary interface for elfeed]]
#+begin_src emacs-lisp
  (use-package elfeed-summary
    :bind ("C-c , r" . elfeed-summary)
    :config
    (setq elfeed-summary-other-window t)
    (setq elfeed-summary-settings
          '((group (:title . "科技")
                   (:elements (query . (and tec (not emacs) (not blogs)))
                              (group (:title . "Emacs")
                                     (:elements (query . emacs))
                                     (:face . org-level-1))
                              (group (:title . "Blogs")
                                     (:elements (query . blogs)))))
            (group (:title . "News")
                   (:elements (query . news)))
            (group (:title . "Books")
                   (:elements (query . book)))
            (group (:title . "Finance")
                   (:elements (query . finance)))
            (group (:title . "Youtube")
                   (:elements (query . video)))))

    (advice-add 'elfeed-summary :after 'elfeed-summary-update)
    (advice-add 'elfeed-summary :before 'elfeed-org))
#+end_src

[[https://github.com/karthink/elfeed-tube][karthink/elfeed-tube: Youtube integration for Elfeed, the feed reader for Emacs]] 不知道为什么不能更新 RSS. 暂时停用了。
#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'elfeed
    (require 'elfeed-tube)
    (elfeed-tube-setup)

    (define-key elfeed-show-mode-map (kbd "F") 'elfeed-tube-fetch)
    (define-key elfeed-show-mode-map [remap save-buffer] 'elfeed-tube-save)
    (define-key elfeed-search-mode-map (kbd "F") 'elfeed-tube-fetch)
    (define-key elfeed-search-mode-map [remap save-buffer] 'elfeed-tube-save)

    (require-package 'elfeed-tube-mpv)
    (with-eval-after-load 'elfeed
      (require 'elfeed-tube-mpv)
      (define-key elfeed-show-mode-map (kbd "C-c C-f") 'elfeed-tube-mpv-follow-mode)
      (define-key elfeed-show-mode-map (kbd "C-c C-w") 'elfeed-tube-mpv-where)))
#+end_src
** Reader
*** pdf-tools
升级 pdf-tools 后要重新生成 =epdfinfo= 文件，最好的方式就是重装 pdf-tools，以免有问题。

#+begin_src emacs-lisp
  (use-package pdf-tools
    :hook ((doc-view-mode . pdf-tools-install)
           (dirvish-setup . pdf-tools-install)
           (pdf-tools-enabled . pdf-view-themed-minor-mode)))

  (use-package pdf-view
    :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install t nil t nil)
    (evil-declare-key 'normal pdf-view-mode-map
      "gh" 'pdf-annot-add-highlight-markup-annotation
      "ga" 'pdf-annot-add-text-annotation
      "gd" 'pdf-annot-delete)
    :init
    (setq pdf-view-display-size 'fit-width)
    (setq pdf-view-use-unicode-ligther nil)
    (setq pdf-view-use-scaling t)
    (setq pdf-view-use-imagemagick nil)
    (setq pdf-annot-activate-created-annotations nil))

  (add-to-list 'display-buffer-alist '("\\.pdf"
                                       (display-buffer-in-tab)
                                       (tab-name . "PDF")
                                       (tab-group . "PDF")))
  (use-package pdf-occur
    :hook (pdf-view-mode . pdf-occur-global-minor-mode))

  (use-package pdf-history
    :hook (pdf-view-mode . pdf-history-minor-mode))

  (use-package pdf-links
    :hook (pdf-view-mode . pdf-links-minor-mode))

  (defun my/get-file-name ()
    "Copy pdf file name."
    (interactive)
    (kill-new (file-name-base (buffer-file-name)))
    (message "Copied %s" (file-name-base (buffer-file-name))))

  (use-package pdf-outline
    :hook (pdf-view-mode . pdf-outline-minor-mode)
    :bind (:map pdf-outline-buffer-mode-map
                ("RET" . pdf-outline-follow-link-and-quit)))

  (add-to-list 'display-buffer-alist '("\\*Outline"
                                       (display-buffer-in-side-window)
                                       (side . right)
                                       (window-width . 0.5)
                                       (window-parameters
                                        (mode-line-format . none))))
  (use-package pdf-annot
    :hook (pdf-view-mode . pdf-annot-minor-mode)
    :bind (:map pdf-annot-edit-contents-minor-mode-map
                ("<return>" . pdf-annot-edit-contents-commit)
                ("<S-return>" . newline)))

  (use-package pdf-sync
    :hook (pdf-view-mode . pdf-sync-minor-mode))

  (use-package pdf-cache
    :after pdf-view
    :config
    (define-pdf-cache-function pagelabels))

  (use-package pdf-misc
    :after pdf-view
    :config
    (setq pdf-misc-print-program-executable "/usr/bin/lp")

    (defun mrb/pdf-misc-print-pages(filename pages &optional interactive-p)
      "Wrapper for `pdf-misc-print-document` to add page selection support."
      (interactive (list (pdf-view-buffer-file-name)
                         (read-string "Page range (empty for all pages): "
                                      (number-to-string (pdf-view-current-page)))
                         t) pdf-view-mode)
      (let ((pdf-misc-print-program-args
             (if (not (string-blank-p pages))
                 (cons (concat "-P " pages) pdf-misc-print-program-args)
               pdf-misc-print-program-args)))
        (pdf-misc-print-document filename)))
    :bind (:map pdf-view-mode-map
                ([remap pdf-misc-print-document] . mrb/pdf-misc-print-pages)))
#+end_src

#+begin_src emacs-lisp
  (defun my/pdf-extract-highlight ()
    "Extract highlight to plain text.
  When it finised, it will jump to note file."
    (interactive)
    (let* ((pdf-filename (buffer-name))
           (txt-filename (make-temp-name "/tmp/annot-"))
           (org-file (read-file-name "Save extracted highlights to org file: " (expand-file-name "roam/ref/" my-galaxy)))
           (org-heading "Highlights")
           (process (start-process-shell-command
                     "pdfannots"
                     nil
                     (format "python3 ~/pdfannots/pdfannots.py \"%s\" -o \"%s\""
                             pdf-filename txt-filename))))
      (set-process-sentinel
       process
       (lambda (process _event)
         (when (eq (process-status process) 'exit)
           (find-file org-file)
           (goto-char (point-min))
           (if (re-search-forward (format "^* %s" org-heading) nil t)
               (progn
                 (end-of-line)
                 (insert "\n")
                 (insert-file-contents txt-filename)
                 (delete-file txt-filename)
                 (message "PDF highlights added to org heading '%s'" org-heading))
             (message "Org heading '%s' not found" org-heading)))))))

  (my/comma-leader-def
    "h" '(my/pdf-extract-highlight :wk "Extract highlight"))
#+end_src
#+begin_src emacs-lisp
  (defun my/dired-pdf-to-png ()
    (interactive)
    (let* ((filename (dired-get-filename)))
      (if (string-match "\.pdf" filename)
          (let* ((pdf-base-name (file-name-sans-extension (file-name-nondirectory filename)))
                 (png (concat pdf-base-name ".png"))
                 (pdf-info (shell-command-to-string (format "pdfinfo %s | grep Pages | awk '{print $2}'" filename)))
                 (pdf-pages (string-to-number pdf-info)))
            (when (file-exists-p png)
              (delete-file png))
            (if (= pdf-pages 1)
                (start-process-shell-command
                 "pdf-to-png"
                 nil
                 (format "pdftoppm -singlefile -r 600 %s %s -png" filename pdf-base-name))
              (start-process-shell-command
               "pdf-to-png"
               nil
               (format "pdftoppm -r 600 %s %s -png" filename pdf-base-name))))
        (message "Current file is not a PDF file."))))
#+end_src
*** COMMENT saveplace-pdf-view

*** Nov
Nov 用于阅读 epub 文件。
#+begin_src emacs-lisp
  (use-package nov
    :mode (".epub" . nov-mode)
    :config
    (setq nov-unzip-program (executable-find "bsdtar")
          nov-unzip-args '("-xC" directory "-f" filename)))
#+end_src
*** Calibredb
Calibre 用于管理书籍，Calibredb 可以在 Emacs 中管理而不需要打开 Calibre 软件。
#+begin_src emacs-lisp
  ;; Export catalog need to use argument: set entry type to mixed, default is book.
  (use-package calibredb
    :bind (("<f1>" . calibredb)
           :map calibredb-search-mode-map
           ("C-c l" . calibredb-copy-as-org-link))
    :config
    (setq calibredb-root-dir "~/Nextcloud/L.Calibre/")
    (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
    (setq calibredb-add-delete-original-file t)
    (setq calibredb-size-show t)
    (setq calibredb-format-character-icons t)

    (setq calibredb-ref-default-bibliography (expand-file-name "calibre.bib" calibredb-root-dir))

    (evil-set-initial-state 'calibredb-search-mode 'emacs))
#+end_src
** vterm
使用[[https://github.com/akermu/emacs-libvterm][akermu/emacs-libvterm: Emacs libvterm integration]] 替代了内置的 eshell.
#+begin_src emacs-lisp
  (use-package vterm
    :bind ("C-c , v" . toggle-vterm)
    :config
    (setq vterm-kill-buffer-on-exit t)
    (setq vterm-max-scrollback 5000)
    (add-to-list 'display-buffer-alist
                 '("\\*vterm\\*"
                   (display-buffer-in-side-window)
                   (window-height . 0.35)
                   (side . bottom)
                   (slot . -1)))
    (defun toggle-vterm ()
      "Toggle vterm on or off."
      (interactive)
      (if (get-buffer-window "*vterm*")
          (delete-window (get-buffer-window "*vterm*"))
        (progn
          (vterm)
          (evil-insert 1)))))

  (my/comma-leader-def
    "v" '(toggle-vterm :wk "vterm"))
#+end_src
** Mail
*** Personal Info
#+begin_src emacs-lisp
  (setq user-full-name "Duan Ning")
  (setq user-mail-address "duan_n@outlook.com")
#+end_src
*** Message
#+begin_src emacs-lisp
  (setq message-sendmail-envelope-from 'header)
  (setq message-kill-buffer-query nil)
  (setq message-sendmail-extra-arguments '("-a" "outlook"))
  (setq message-send-mail-function 'sendmail-send-it)
#+end_src
*** Mu4e
在 MacOS 上配置 mu 和 mu4e 的教程见：[[https://macowners.club/posts/email-emacs-mu4e-macos/][Email setup in Emacs with Mu4e on macOS | macOS & (open-source) Software]].

上述的教程写的很详细，按照步骤进行一定会成功。

配置 Emacs 时经常要多次重启，这有可能导致 mu 报以下的错误：
#+begin_quote
error in process sentinel: mu4e--server-sentinel: Mu server process ended with exit code 1
error in process sentinel: Mu server process ended with exit code 1
#+end_quote
这时需要在终端下执行以下的命令来恢复 mu 的状态。
#+begin_src shell
  mu init --maildir=~/.maildir --my-address=your_email_account && mu index
#+end_src

启动 Emacs 时直接启动 mu4e 会导致 Emacs 启动速度变的很慢，当 Emacs 处于 idle 状态时在后台启动。
#+begin_src emacs-lisp
  (add-to-list 'load-path "/opt/homebrew/opt/mu/share/emacs/site-lisp/mu/mu4e")
  (unless (fboundp 'mu4e)
    (autoload #'mu4e "mu4e" nil t))

  (run-with-idle-timer 5 nil #'(lambda () (mu4e 'background)))
#+end_src

这里有个 [[https://github.com/rougier/mu4e-dashboard][rougier/mu4e-dashboard: A dashboard for mu4e (mu for emacs)]] 看着很好看，但是不实用，不要再尝试。
#+begin_src emacs-lisp
  (with-eval-after-load 'mu4e
    (setq mail-user-agent 'mu4e-user-agent)
    (setq mu4e-mu-binary (executable-find "mu"))
    (setq mu4e-update-interval (* 15 60))
    (setq mu4e-attachment-dir "~/Downloads/")
    (setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
    (setq mu4e-index-update-in-background t)
    (setq mu4e-index-update-error-warning t)
    (setq mu4e-index-update-error-warning nil)
    (setq mu4e-index-cleanup t)
    (setq mu4e-view-show-images t)
    (setq mu4e-view-image-max-width 800)
    (setq mu4e-view-show-addresses t)
    (setq mu4e-confirm-quit nil)
    (setq mu4e-context-policy 'pick-first)
    (with-eval-after-load 'mu4e
      (setq mu4e-sent-folder   "/outlook/Sent"
            mu4e-drafts-folder "/outlook/Drafts"
            mu4e-trash-folder  "/outlook/Deleted"
            mu4e-refile-folder  "/outlook/Archive"))
    (setq mu4e-view-prefer-html nil)
    (setq mu4e-html2text-command 'mu4e-shr2text)
    (setq mu4e-main-hide-personal-addresses t)
    (setq mu4e-headers-precise-alignment t)
    (setq mu4e-headers-include-related t)
    (setq mu4e-headers-auto-update t)
    (setq mu4e-headers-date-format "%d/%m/%y")
    (setq mu4e-headers-time-format "%H:%M")
    (setq mu4e-headers-fields '((:flags . 4)
                                (:human-date . 9)
                                (:subject . 90)
                                (:from-or-to . 40)
                                (:tags . 20)))
    (setq mu4e-bookmarks '(("flag:unread AND NOT flag:trashed" "Unread messages" ?u)
                           ("date:today..now" "Today's messages" ?t)
                           ("date:7d..now" "Last 7 days" ?w)
                           ("date:1d..now AND NOT list:emacs-orgmode.gnu.org" "Last 1 days" ?o)
                           ("date:1d..now AND list:emacs-orgmode.gnu.org" "Last 1 days (org mode)" ?m)
                           ("maildir:/drafts" "drafts" ?d)
                           ("flag:flagged AND NOT flag:trashed" "flagged" ?f)
                           ("mime:image/*" "Messages with images" ?p)))
    (setq mu4e-compose-reply-ignore-address '("no-?reply" "duan_n@outlook.com"))
    (setq mu4e-compose-format-flowed nil)
    (setq mu4e-compose-signature-auto-include nil)
    (setq mu4e-compose-dont-reply-to-self t))
#+end_src
若要把 mail 和 org 笔记相结合，可以使用 ~org-store-link~ 和 ~org-insert-link~ 给合使用，在 org 文件中插入 mail 的链接。
#+begin_src emacs-lisp
  (with-eval-after-load 'mu4e
    (define-key mu4e-headers-mode-map (kbd "C-c l") 'org-store-link))
#+end_src
#+begin_src emacs-lisp
  (my/comma-leader-def
    "e" '(mu4e :wk "MAIL"))
#+end_src
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               `(,(rx (| "*mu4e-main*"
                         "*mu4e-headers*"))
                 (display-buffer-in-tab)
                 (tab-name . "Mail")
                 (tab-group . "Mail")
                 (window-parameters . ((mode-line-format . none)))))
#+end_src
*** mu4e-actions
Save mail to pdf as backup.
#+begin_src emacs-lisp
  (defun extra-email-to-pdf (msg &optional args)
    "Pdf temp file MSG to a new name with ARGS ignored."
    (let* ((async-shell-command-display-buffer nil)
           (temp (format-time-string (expand-file-name "%Y-%m-%dT%H:%M.pdf" mail-source-directory)))
           (name (read-string "File name: " temp))
           (html (replace-regexp-in-string (regexp-quote "file://") "" msg t t)))
      (if args (message "Additional optional argument was ignored when saving to PDF."))
      (async-shell-command (concat "pandoc " html " -o " name))))

  (defun extra-print-email-to-pdf (msg &optional skip-headers)
    "Save current MSG as a pdf if it includes an HTML-part.
  If SKIP-HEADERS is set, do not show include message headers."
    (let* ((browse-url-browser-function  'extra-email-to-pdf))
      (mu4e-action-view-in-browser msg skip-headers)))
  (with-eval-after-load 'mu4e
    (add-to-list 'mu4e-view-actions '("print to PDF"  . extra-print-email-to-pdf)))
#+end_src
Save mail to html as backup.
#+begin_src emacs-lisp
  (defun extra-move-temp-email-location (msg &optional args)
    "Move and rename temp file MSG to a new location with ARGS ignored."
    (let* ((temp (format-time-string (expand-file-name "html/%Y-%m-%dT%H:%M.html" mail-source-directory)))
           (name (read-string "File name: " temp))
           (file (replace-regexp-in-string (regexp-quote "file://") "" msg t t)))
      (if args (message "Additional optional argument was ignored when saving to HTML."))
      (rename-file file name)))

  (defun extra-save-email-html (msg &optional skip-headers)
    "Save current MSG HTML-part.
  If SKIP-HEADERS is set, do not show include message headers."
    (let* ((extra-temp-email-dir (expand-file-name "html" mail-source-directory))
           (browse-url-browser-function  'extra-move-temp-email-location))
      (mu4e-action-view-in-browser msg skip-headers)))

  (with-eval-after-load 'mu4e
    (add-to-list 'mu4e-view-actions '("download as html"  . extra-save-email-html)))
#+end_src
*** Icons
#+begin_src emacs-lisp
  (with-eval-after-load 'all-the-icons
    (setq display-time-mail-icon `(,(propertize
                                     (all-the-icons-material "mail")
                                     'face `(:family ,(all-the-icons-material-family))))))

  (with-eval-after-load 'mu4e
    (setq mu4e-use-fancy-chars nil))
  ;; (require-package 'mu4e-marker-icons)
  ;; (add-hook 'mu4e-headers-mode-hook 'mu4e-marker-icons-mode)
#+end_src
*** COMMENT mu4e-alert
#+begin_src emacs-lisp
  (with-eval-after-load 'mu4e
    (mu4e-alert-set-default-style 'osx-notifier)
    (mu4e-alert-enable-notifications)
    (mu4e-alert-enable-mode-line-display))
#+end_src
*** COMMENT mu4e-column-faces
#+begin_src emacs-lisp
  (with-eval-after-load 'mu4e
    (mu4e-column-faces-mode))
#+end_src
*** Send mail
#+begin_src emacs-lisp
  (add-hook 'mu4e-main-mode-hook
            (lambda ()
              (progn
                (require 'smtpmail-async)
                (setq send-mail-function 'async-sendmail-send-it)
                (setq message-send-mail-function 'async-smtpmail-send-it))))
  (setq sendmail-program (executable-find "msmtp"))
  (setq mail-specify-envelope-from t)
  (setq mail-envelope-from 'header)
#+end_src
*** COMMENT org-msg
使用 [[https://github.com/jeremy-compostella/org-msg][jeremy-compostella/org-msg: OrgMsg is a GNU/Emacs global minor mode mixing up Org mode and Message mode to compose and reply to emails in a Outlook HTML friendly style.]] 来编写 Email.

需要添加附件时执行 C-c C-a.
#+begin_src emacs-lisp
    (setq org-msg-options "html-preamble:nil html-postamble:nil toc:nil author:nil email:nil")
    (setq org-msg-greeting-fmt "\nHi%s,\n\n")
    (setq org-msg-recipient-names `(,user-mail-address . ,user-full-name))
    (setq org-msg-greeting-name-limit 3)
    (setq org-msg-default-alternatives '((new		. (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text))))
    (setq org-msg-convert-citation t)

    (setq org-msg-signature (concat "Best Regards,\n\n#+begin_signature\n*"
                                    user-full-name
                                    "*\n\n" (format-time-string "%Y-%m-%d")
                                    "\n#+end_signature"))

    (add-hook 'mu4e-main-mode-hook 'org-msg-mode)
#+end_src

** Report
我使用 [[Calibredb]] 管理书籍，使用 org-roam 下的 books 文件夹管理读书笔记内容。凡是读书必建立对应的笔记内容，在笔记内容中会使用 org-clock 的功能记录读书的时长。

读书笔记通过 org-roam-capture 中的 books 一项创建。

然后在读书记录笔记中可以通过 org report 功能生成一年的读书记录。

#+begin_example
  ,#+BEGIN: clocktable :scope my/reading-list :maxlevel 9 :emphasize t :fileskip0 t :hidefiles t :block 2023
  ,#+END:
#+end_example

clocktable 中的 scope 可以是自定义的函数，下面的函数将 books 下的所有读书笔记纳入统计范围。生成的表格中包括了书名及阅读本书所花的时间。

#+begin_src emacs-lisp
  ;; Get reading list from books directory for org-clock report.
  ;; The org-clock report scope can be a function.
  (defun my/reading-list ()
    "Get reading list."
    (let (reading-list)
      (append reading-list
              (file-expand-wildcards (expand-file-name "roam/books/*.org" my-galaxy)))))
#+end_src

** Achive
#+begin_src emacs-lisp
  (use-package achive
    :commands achive
    :config
    (setq achive-language 'zh)
    (setq achive-cache-path (expand-file-name ".achive" no-littering-var-directory)))

  (my/comma-leader-def
    "a" '(achive :wk "A-share"))

  (with-eval-after-load 'evil-collection
    (evil-collection-define-key 'normal 'achive-visual-mode-map
      "q" 'quit-window))

#+end_src
* Easy use, Code snippets
** Open APP within Emacs
该配置来源：[[https://emacs-china.org/t/emacs-mini-buffer-app-macos-only/23153][[技巧分享] 在 Emacs mini buffer 中选择并打开其他 App【macOS only】 - Emacs-general - Emacs China]]
#+begin_src emacs-lisp
  (defun mac-launchpad/string-ends-with (s ending)
    "Return non-nil if string S ends with ENDING."
    (cond ((>= (length s) (length ending))
           (let ((elength (length ending)))
             (string= (substring s (- 0 elength)) ending)))
          (t nil)))

  (defun mac-launchpad/find-mac-apps (folder)
    (let* ((files (directory-files folder))
           (without-dots (cl-delete-if (lambda (f) (or (string= "." f) (string= ".." f))) files))
           (all-files (mapcar (lambda (f) (file-name-as-directory (concat (file-name-as-directory folder) f))) without-dots))
           (result (cl-delete-if-not (lambda (s) (mac-launchpad/string-ends-with s ".app/")) all-files)))
      result))

  (defun mac-launchpad ()
    (interactive)
    (let* ((apps (mac-launchpad/find-mac-apps "/Applications"))
           (to-launch (completing-read "launch: " apps)))
      (shell-command (format "defaults read \"%s\"Contents/Info.plist CFBundleIdentifier | xargs open -b" to-launch))))
#+end_src
#+begin_src emacs-lisp
  (my/comma-leader-def
    "j" '(mac-launchpad :wk "Jump to App"))
#+end_src
** Open file with system file manager
#+begin_src emacs-lisp
  (defun xah-show-in-desktop ()
    "Show current file in desktop.
  This command can be called when in a file buffer or in `dired'."
    (interactive)
    (let (($path (if (buffer-file-name) (buffer-file-name) default-directory)))
      (cond
       ((string-equal system-type "windows-nt")
        (shell-command
         (format "PowerShell -Command Start-Process Explorer -FilePath %s"
                 (shell-quote-argument default-directory))))
       ((string-equal system-type "darwin")
        (if (eq major-mode 'dired-mode)
            (let (($files (dired-get-marked-files )))
              (if (eq (length $files) 0)
                  (shell-command (concat "open " (shell-quote-argument (expand-file-name default-directory ))))
                (shell-command (concat "open -R " (shell-quote-argument (car (dired-get-marked-files )))))))
          (shell-command
           (concat "open -R " (shell-quote-argument $path)))))
       ((string-equal system-type "gnu/linux")
        (let ((process-connection-type nil)
              (openFileProgram (if (file-exists-p "/usr/bin/gvfs-open")
                                   "/usr/bin/gvfs-open"
                                 "/usr/bin/xdg-open")))
          (start-process "" nil openFileProgram (shell-quote-argument $path)))))))

  (my/space-leader-def
    "fd" '(xah-show-in-desktop :wk "Open in Finder"))
#+end_src

** Remove link
下面的配置来源：[[https://github.com/jeremyf/dotemacs/blob/main/emacs.d/jf-org-mode.el][dotemacs/jf-org-mode.el at main · jeremyf/dotemacs]]. 作用是移除 org 文件中的链接，仅保留链接的描述内容。
#+begin_src emacs-lisp
  (defun jf/org-link-remove-link ()
    "Remove the link part of an `org-mode' link at point and keep only the description."
    (interactive)
    (let ((elem (org-element-context)))
      (when (eq (car elem) 'link)
        (let* ((content-begin (org-element-property :contents-begin elem))
               (content-end  (org-element-property :contents-end elem))
               (link-begin (org-element-property :begin elem))
               (link-end (org-element-property :end elem)))
          (when (and content-begin content-end)
            (let ((content (buffer-substring-no-properties content-begin content-end)))
              (delete-region link-begin link-end)
              (insert content)))))))

  (with-eval-after-load 'evil
    (evil-declare-key 'normal 'global
      "gX" 'jf/org-link-remove-link))
#+end_src
** Add timestamps to youtube links
此配置来源：[[https://mbork.pl/2022-10-10_Adding_timestamps_to_youtube_links][Marcin Borkowski: 2022-10-10 Adding timestamps to youtube links]].

这个函数的作用是在 youtube 链接中增加时间，这样可以进行视频内容的精准跳转，当你看了一部份视频内容时记录时间等后期接着看。
#+begin_src emacs-lisp
  (defun yt-set-time (time)
    "Set TIME in the YouTube link at point.)
    TIME is number of seconds if called from Lisp, and a string if
    called interactively.
    Supported formats:
    - seconds
    - minutes:seconds
    - number of seconds with the \"s\" suffix."
    (interactive (list
                  (if current-prefix-arg
                      (prefix-numeric-value current-prefix-arg)
                    (read-string "Time: "))))
    (let ((url (thing-at-point-url-at-point)))
      (if (and url
               (string-match
                (format "^%s"
                        (regexp-opt
                         '("https://www.youtube.com/"
                           "https://youtu.be/")
                         "\\(?:")))
               url))
      (let* ((bounds (thing-at-point-bounds-of-url-at-point))
             (time-present-p (string-match "t=[0-9]+" url))
             (question-mark-present-p (string-search "?" url))
             (seconds (cond
                       ((numberp time)
                        time)
                       ((string-match
                         "^\\([0-9]+\\):\\([0-9]\\{2\\}\\)$" time)
                        (+ (* 60 (string-to-number
                                  (match-string 1 time)))
                           (string-to-number (match-string 2 time))))
                       ((string-match "^\\([0-9]+\\)s?$" time)
                        (string-to-number (match-string 1 time)))
                       (t (error "Wrong argument format"))))
             (new-url (if time-present-p
                          (replace-regexp-in-string
                           "t=[0-9]+"
                           (format "t=%i" seconds)
                           url)
                        (concat url
                                (if question-mark-present-p "&" "?")
                                (format "t=%i" seconds)))))
        (delete-region (car bounds) (cdr bounds))
        (insert new-url))
      (error "Not on a Youtube link")))
#+end_src
#+begin_src emacs-lisp
  (my/space-leader-def
    "lt" '(yt-set-time :wk "Set Youtube link time"))
#+end_src
** self define function
#+begin_src emacs-lisp
  (defun switch-to-message ()
    "Quick switch to `*Message*' buffer."
    (interactive)
    (switch-to-buffer "*Messages*"))

  (defun switch-to-scratch ()
    "Quick switch to `*Scratch*' buffer."
    (interactive)
    (switch-to-buffer "*scratch*"))

  (my/space-leader-def
    "bs" '(switch-to-scratch :wk "*scratch*")
    "bm" '(switch-to-message :wk "*message*"))

  (defun my/inbox-file ()
    "Open inbox file."
    (interactive)
    (find-file (expand-file-name "inbox/inbox.org" my-galaxy)))

  (defun my/plan-file ()
    "Open plan file."
    (interactive)
    (find-file (expand-file-name "inbox/plan.org" my-galaxy)))

  (defun my/index-file ()
    (interactive)
    (find-file (expand-file-name "roam/main/index.org" my-galaxy)))

  (defun my/reflection-file ()
    (interactive)
    (find-file (expand-file-name "roam/main/reflection.org" my-galaxy)))

  (defun my/finance-file ()
    "Open finance file."
    (interactive)
    (find-file (expand-file-name "finance/finance.bean" my-galaxy)))

  (defun my/reading-record ()
    "Open reading record file."
    (interactive)
    (find-file (expand-file-name "roam/main/reading-record.org" my-galaxy)))

  (my/space-leader-def
    "fo" '(:ignore t :wk "Open file")
    "fob" '(my/reading-record :wk "Reading record")
    "foi" '(my/inbox-file :wk "Inbox file")
    "foI" '(my/index-file :wk "Index file")
    "fop" '(my/plan-file :wk "Plan file")
    "fof" '(my/finance-file :wk "Finance file")
    "for" '(my/reflection-file :wk "Reflection file")
    "fog" '(my/gtd-file :wk "GTD file"))

  (defun my/start-server ()
    (interactive)
    (if (not (server-running-p))
        (server-start))
    (message "Server has started"))

  (defun my/scroll-other-windown-down ()
    "Scroll other window down."
    (interactive)
    (scroll-other-window-down 2))

  (global-set-key (kbd "M-p") 'my/scroll-other-windown-down)

  (defun my/scroll-other-windown ()
    "Scroll other window up."
    (interactive)
    (scroll-other-window 2))

  (global-set-key (kbd "M-n") 'my/scroll-other-windown)
#+end_src
* End
#+begin_src emacs-lisp
  ;;; init.el ends here.
#+end_src
